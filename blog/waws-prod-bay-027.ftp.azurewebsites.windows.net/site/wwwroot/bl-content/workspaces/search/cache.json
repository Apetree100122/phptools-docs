{"2021\/php-tools-vs-code-1-4":{"title":"PHP Tools for Code, Version 1.4","description":"Announcing release version 1.4 of PHP Tools for Visual Studio Code!","content":"Announcing release version 1.4 of PHP Tools for Visual Studio Code. Read more about the new features made for developers, addressing most frequent questions, requests, and ideas.\nPHP Tools for VS Code 1.4\nPHP Tools for VS Code is an extension for Visual Studio Code providing complete PHP development environment. There are built-in the following high-level features:\n\nfully featured code editor with advanced code analysis engine\nintegrated fine-tuned debugging support\ntest explorer for PHPUnit which runs and debugs\ncode problem analysis, and code fixes\n\nAll the features are working together. See the marketplace page for more details at Visual Studio Marketplace \/ PHP Tools.\nWhat's new?\nGet ready for the new PHP 8.1 with the built-in editor support, neat Test Explorer, and new code actions for quick code fixes. In addition to that, there the following new features:\nPHP Version Picker\n\nThe editor, problems analysis, debugger, and the test explorer; they all need to work with a specified version of PHP. PHP Tools now provide a configuration to choose a specific PHP version or a specific executable to use across all these features. The selected version is noted at the bottom right corner of your VS Code, and can be clicked on now.\n\nAvailable PHP's are listed, together with user configured executables. Each PHP can be named, and referenced by your workspace setting.\nSee docs - PHP Version for more details.\nNew Problems Configuration\nWe have added a new options on how to deal with problems across the entire workspace. PHP Tools may analyze the entire workspace for possible issues, however it may not make sense for packages in your vendor folder.\nThe new setting php.problems.scope is by default set to only analyze user's code, excluding the vendor folder. This not only speeds up the analysis, but also allows you to focus on your code only.\nAdditionally, we have unified the configuration with the full Visual Studio where you can specify the problems severity in .editorconfig file in more details. It allows to override problems severity or visibility specifically using wild-cards and problems ID.\nSee docs - Problems for more details.\nException Handling\nPreviously, there were low-level options on how to deal with errors, warnings, and exception during debugging. From the user's perspective, it was not always what they expected.\n\nIt was not possible to only break on unhandled fatal errors - you had to break on any exception or nothing. Now the behavior changes; it is possible to choose whether to break on handled errors, however the debugger will always break on a fatal error or exception. In the result, users don't have to go through all the single throws in their code, just to find the last one ... the debugger will break only on the one causing the fatal issue.\nThe new release makes it easier to find bugs in your code, improves stability, and responsiveness of the debugging session.\nThanks!\nWe're happy we could announce the new milestone in our extension, improved thanks to your feedback."},"2021\/laravel-wsl-vscode":{"title":"Laravel on WSL and VS Code","description":"Installing WSL, PHP, Xdebug, Composer, Laravel, and running and debugging the project on VSCode.","content":"Visual Studio Code and Windows Subsystem for Linux (WSL): those represent a great couple for developing a PHP application such as Laravel inside a virtual Linux environment. This tutorial describes installation of WSL (version 2) on Windows 10, setting up PHP with debugging capabilities in there, creating a Laravel project, and getting your VS Code ready to debug the PHP project in WSL.\nWindows Subsystem for Linux\n\nFor the complete documentation of WSL, visit docs.microsoft.com.\n\nBefore you begin, ensure your computer has a CPU Virtualization support enabled in your BIOS. Sometimes it is disabled by default.\nEnabling WSL\nMake sure you have installed the following Windows Features:\n\nVirtual Machine Platform\nWindows Subsystem for Linux\n\n\nYou can install them either from the Turn Windows features on or off control panel (as depicted on the screenshot above), or using the following PowerShell (opened as Administrator) commands:\ndism.exe \/online \/enable-feature \/featurename:Microsoft-Windows-Subsystem-Linux \/all \/norestart\ndism.exe \/online \/enable-feature \/featurename:VirtualMachinePlatform \/all \/norestart\nAfter installing the features, restart your computer.\nWSL 2\nNow download and install the WSL 2 update package using  the installer at WSL2 update for x64 machines.\nAnd finally, open PowerShell and set your WSL version to 2 by default:\nwsl --set-default-version 2\nUsing WSL version 2 may be optional, but I've encountered a few issues with just WSL 1.\nInstalling Ubuntu on WSL\n\nUbuntu itself is installed from the Microsoft Store app. Open Microsoft Store, search for Ubuntu, and click Get and Install.\n\nAfter installing the container, Launch the application. A new terminal window will appear, finishing initialization and waiting for you to fill in a new user name and password.\nInstalling, this may take a few minutes...\nPlease create a default UNIX user account. The username does not need to match your Windows username.\nFor more information visit: https:\/\/aka.ms\/wslusers\nEnter new UNIX username:\nNew password:\nRetype new password:\n\nInstallation successful!\nPrepare your VS Code\nVisual Studio Code is a powerful editor for developers. One of its features is that you can develop projects on a remote machine (in our case in a WSL container). To develop PHP code on WSL, install at least those two extensions:\n\n\nRemote - WSL, extension ID: ms-vscode-remote.remote-wsl\nPHP Tools for VS Code, extension ID: devsense.phptools-vscode\n\nOpen Ubuntu in WSL\nNow you have VSCode, WSL, and Ubuntu installed and ready. Connect the VSCode to the your Ubuntu container. Press F1 to bring the command palette, and run the command Remote-WSL: New WSL Windows using Distro...,\n\nChoose the Ubuntu from the list, and confirm.\n\nA new VSCode window will open. From now on, the VSCode workspace is actually your user folder in the virtual environment, and all the commands and all the code run in Linux. To complete the setup of VSCode on Ubuntu, explicitly install VSCode extensions in WSL:\n\nOpen Terminal\n\nThe last step is to open VSCode terminal (Ctrl+`) and start typing commands ...\nInstall PHP+Xdebug\nIn the terminal window, enter the following two commands - to update the apt cache and install PHP with a set of extensions, including Xdebug!\nsudo apt-get update\nsudo apt-get install -y git php7.4 php7.4-curl php7.4-xml php7.4-zip php7.4-mbstring php7.4-gd php7.4-sqlite3 php7.4-mysql php7.4-xdebug\nYou can verify the installation by running the PHP command php -version:\n\nInstall Composer\nTo create a new Laravel project, it will be useful to have Composer tool installed globally. Follow the official instructions to download and install the tool in your Ubuntu container, and move the tool to global path:\nphp -r \"copy('https:\/\/getcomposer.org\/installer', 'composer-setup.php');\"\nphp composer-setup.php\nphp -r \"unlink('composer-setup.php');\"\nsudo mv composer.phar \/usr\/local\/bin\/composer\nThe Laravel Project\nNow we are ready to create some PHP, edit it, run and debug the code, etc. In t"},"2021\/php-vs-code-may-2021":{"title":"PHP Tools for VS Code (May 2021)","description":"Visual Studio Code is getting more features for PHP development!","content":"The recent updates to PHP Tools for VS Code introduces new features and improvements. Read more about the new test explorer, debugging improvements, code actions, and more.\n\nTest Explorer\nTesting is an essential part of the software development. Newly, PHP Tools are extending the complete Test Explorer functionality and implementing full range new features.\nDebugging PHPUnit Tests\n\nSingle tests got a new code lens with quick actions for Run, Debug, and Show in Test Explorer. This allows to quickly start and debug the single test right from the code. Users can also use the Test Explorer view and debug all the tests, just selected tests, or single test suites.\nTest Discovery\n\nThe Test Explorer is now fast, and automatically updated whenever a test file is changed, using smart scan for test cases without the need of running PHP or PHPUnit at all. All the details about tests discovery and test run is logged into the Output window, under the log named PHP (PHPUnit).\nRetirement of Test Results\nWhenever a test file is changed, Test Explorer discovers the contained test cases and mark them as retired. This helps to keep track of tests that should be run again.\nOptimized Tests Run\nUpon running a custom selection of tests or test suites or all the tests at once, PHP Test Explorer minimizes number of php processes needed to be spawned. In most cases, all the selected tests run within one process which improves the time needed to initiate the testing.\nAdditionally, the PHP Test Explorer marks the tests progress continuously now. In the result, next to each test case, it shows whether it is pending, waiting, failed, was skipped or succeeded.\nNewly, test cases with data sets are also supported.\nDebug\nIn the recent updates, there have been many improvements to the debugging support. Currently there is a stable support for multi-session debugging, utilizing all the available Xdebug versions and protocols. The Xdebug protocol and related issues have been fixed and optimized as well.\nCheck the output panel for details about your setup, and whether Xdebug is properly configured:\n\nThe PHP debugging works out of the box, allowing to simply start the application with F5 key, or with optional launch settings for built-in, remote debug, or with DBGp Proxy.\nCode Actions\nThere are new code actions and code fixes for Sort uses and Generate constructor.\n\nSorting uses respects the PSR-12 notation.\nConstructors can be generated either empty, or with pre-initialized parameters for already declared properties.\nWSL &amp; Remote FS\nWe have been working on adding support for WSL (Windows Subsystem for Linux) and Remote-FS support. WSL, specifically WSL 2, is recommended since the user gets full code completion and code analysis. Remote file systems are also supported, although editor does not &quot;see&quot; the entire workspace content and cannot provide all the completions.\n\nNote, for the WSL support the extension will be installed into the virtual environment and needs to be activated there as well.\nPHP 8.1\nThe PHP editor in VS Code is getting a preview support for the new PHP 8.1, according to the latest PHP RFCs. Currently, there is support for:\n\nThe new octal number notation, e.g. 0o777.\nnever return type, which is also fully analyzed, and functions not respecting the new type get reported and underlined.\nenum support, its syntax, type checks, debugging, and code completion.\n\n"},"2021\/php-tools-for-visual-studio-april-2021":{"title":"PHP Tools for Visual Studio (May 2021)","description":"News about new features in PHP 8.1 and PHP Tools for Visual Studio - RegEx, PHP 8.1 enumerations, PHP 8.1 installation, etc.","content":"Read the news about new features in PHP 8.1 and PHP Tools for Visual Studio - RegEx, PHP 8.1 enumerations, PHP 8.1 installation, etc.\nPHP 8.1 (dev)\nIt is now possible to try the development version of PHP, the PHP 8.1. Go to the project properties, and choose PHP 8.1, as depicted on the screenshot below.\n\nUpon running the project for the first time, PHP 8.1-dev will be automatically installed or updated. You'll have the opportunity to debug and try your project on the latest build of PHP 8.1 on Windows. If you're keen to try the latest new features such as: enumerations, the new octal number notation, the new never return type, go ahead.\nPHP 8.1 Editor Support\nThe new PHP's features are also supported by the editor. Upon choosing PHP 8.1 in the project properties, the editor will provide IntelliSense, syntax support and error checking for the new features as well.\n\nFor the new enum with cases, you're getting tooltips, code completion, corresponding icons in navigation bar, search, all over the IntelliSense, and enum snippet.\n\nThe new octal number notation is useful as well. Note, that when switching back to PHP 8.0 or lower, the editor will underline and report all the new constructs as not yet supported. This means, the user will get notified whenever they'll use an unsupported feature on an older PHP.\nThe new features are also analyzed for potential issues. \n\nRegEx Support (VS 2019)\nThe editor now provides colorization of Perl Compatible Regular Expressions (PCRE), error underlining, and a neat RegEx Tool Window, which shows matched groups, allows to test the expression on a test subject, and underlines errors in the RegEx itself.\n\nCheckout the separate blog post for more information at https:\/\/blog.devsense.com\/2021\/php-regex-editor or the documentation page at https:\/\/docs.devsense.com\/en\/vs\/editor\/regex .\nFixes and improvements\nFor minor fixes and improvements, please see our changelog. "},"2021\/php-regex-editor":{"title":"PHP RegEx Editor","description":"PHP Tools for Visual Studio 2019 introduces several neat features making editing and testing regular expressions a fluent experience.","content":"Perl Compatible Regular Expressions (PCRE) are integral part of most PHP applications. Therefore it's important to make developing with them easy and transparent.  PHP Tools for Visual Studio 2019 introduces several neat features making the editing and testing such expressions a fluent experience. The features are the following:\n\ncolorization of the expression\nhighlighting of matching parentheses\nvalidation and error reporting\nseparate Regex Tool Window which highlights expression, updates the regex expression in corresponding PHP code, shows regex groups, allows to test the regex with a test subject and see all the matches, matched groups, and matched captures.\n\nColorization\nRight in the editor, the regular expression syntax is seamlessly highlighted. The color scheme is a part of Visual Studio 2019, and you can change the colors in Visual Studio's menu Tools \/ Options \/ Fonts and Colors.\n\nAll the major elements are distinguished, text, escaped elements, ranges, quantifiers, comments, and groupings.\n\nThe color scheme is adapted for both the light, blue, and dark themes.\nNote, the colorization works for string literals that do not contain any variables, and are a part of preg_*** function calls. The colorization also works for HEREDOC and NOWDOC syntaxes, if they are introduced with either REGEX, PCRE, or PREG labels. All the following syntaxes work:\n\nBrace matching\nIt's important to keep track of all the braces and groups within the regular expression. The brace matching is a natural way of highlighting the group spans in Visual Studio:\n\nWhenever a keyboard caret touches the parenthesis outside, it gets highlighted. This works for comments as well although they have their own (usually green) color.\nRegex Designer\nFor detailed analysis of the regular expression and eventual testing, there is Regex Tool Window. The tool window is opened using a code action Regex Designer. Navigate the keyboard caret at some regular expression, open code actions (usually Ctrl+.), and choose Regex Designer.\n\nThe command opens the Regex Tool Window that gets linked with the source code. It allows to edit the regular expression without dealing with PHP string escaping, and transparently updates the source code with the edited text.\n\nThe tool window also continuously analyzes the regular expression, shows the expression groups in Output pane on the right, and underlines eventual errors. The error is annotated with red dotted underline, and the error detail is shown in a mouse tool-tip.\n\nAll the edits are seamlessly applied to the original source code which deals with additional quotes and character escaping.\n\nRegex Test Subject\nIt is always a good idea to check the expression on some test data. The Regex Tool Window allows to paste a Test Subject.\n\nOnce there is a test subject, the Output pane shows either nothing (if there is no match) or the detailed tree with information about all matches, matched groups, and captured portions of the text. In case there are named groups, the group name is also shown in the Output pane.\nConclusion\nAs I know, all of PHP developers deal with Perl Compatible Regular Expressions, and a way of writing it correctly. The Regex Colorization and Regex Tool Window makes this process easier. It helps with testing your code and preventing unwanted and long testing."},"2021\/managing-multiple-php-versions-on-windows-with-visual-studio":{"title":"Managing multiple PHP versions on Windows with Visual Studio","description":"Switching PHP versions within the project in Visual Studio.","content":"There are several reasons why to have multiple PHP installations locally. You might have one old project that requires PHP 5.6 (already end of line since January 1st 2019), the other project in PHP 7.1 and one more project in PHP 7.4 which you are upgrading to PHP 8.0.\nFortunately with PHP Tools for Visual Studio it\u2019s quite easy to install and switch between PHP versions.\nThe idea is to define requirements you have in the project and it\u2019s up to the PHP Tools to fulfill those requirements.\nInstalling new PHP version\nIn the project properties, in the Application tab you can define what language level (version) you are interested in. Then run the project (F5) PHP Tools will verify if there is an available environment that fulfills this requirement on your machine. \n\nIf there is PHP runtime you want, like in my case, you will be prompted with the dialog asking you to let it install required products. Click to Continue and PHP will be installed.\n\n\nIf you want be more specific about the environment you want to develop your project in, go to the Server tab. In this tab you can specific PHP runtime. Even though you\u2019ve specified Language level in the Application tab, there might be more PHP installations that fits; you can select the one you want here. \n\nNote Since 1.51.13160 x64bit PHP distributions are installed by default on 64bit Operating system.\n\nIn this configuration tab, you can also specify what server you want to use for development. Currently you can select from these servers:\n-PHP Build-in server\nAs of PHP 5.4. there is build-in server in the PHP itself. In most cases it will be enough, but keep in mind there it\u2019s just single-threaded web server, which doesn\u2019t support .htaccess or any rewrite module out of the box. You can find more information at https:\/\/www.php.net\/manual\/en\/features.commandline.webserver.php\n\nIIS Express\nLightweight, self-contained version of IIS optimized for developers. This should suffice for most of your developer needs. But if you plan to run the project on Apache in the production, use Custom server option.\nIIS\nIf you need full-featured IIS web server\nCustom\nWhen you cannot select from previous options or you want to run\/debug the project on remote server, this is the option.\n\n\nConfiguring PHP\nWhen PHP is installed by PHP Tools it has already been configured. But in case you\u2019d like to change it you can find current php.ini file in the Project properties, Server tab.\n\nIn case there is a known issue present in your configuration you will be notified when you run the project and you can let PHP Tools to fix those.\n\nUpdating PHP or Xdebug\nTech world is constantly evolving, every day there is a new update for something, new fix, improvement, or optimization\u2026 PHP is no different.\nWhen an update for PHP version defined for your project gets available, PHP Tools will notify. Following picture shows dialog that notified me when new Xdebug got available. Clicking Continue will install and configure it.\n\nThis process will keep your current configuration intact. But in case of Xdebug it will transform the configuration when you are updating from Xdebug 2.x to 3.x since the configuration options has changed. If you would like to know more details there is an upgrade guide here https:\/\/xdebug.org\/docs\/upgrade_guide\nChange to different PHP Version\nIf you need to switch your project to different PHP version, go to Server tab and select which Runtime you want to use. It can be already installed(e.g. you already have your own PHP installation) or it might be PHP version that\u2019s not present and will be installed and configured by PHP Tools. Same can be done in the Application tab, Language Level, but I mostly do it here since I can exactly see which particular runtime and server it\u2019s going to be used.\nBtw. all these configurations are per-project, so it will not influence any other projects you have.\nOnce you\u2019ve switched to the new PHP version, PHP Tools might notify you there are some configuration issues that needs"},"2021\/php-tools-visual-studio-april-2021":{"title":"PHP Tools for Visual Studio (April 2021)","description":"News and features in PHP Tools for Visual Studio, released on April 2021.","content":"Let's take a look on the April's news and updates for PHP Tools in Microsoft Visual Studio.\nx64\nPHP Tools manage and install PHP for you, if necessary. Now it is possible to choose the 64bit version of the PHP in Project Properties (selected by default) See Project Properties for more details.\n\nThe selected PHP will get automatically downloaded and installed upon running the project. The automatic installation handles the necessary debugging extension Xdebug, configures it, or installs an update if necessary.\nCode Actions\nThe PHP editor got a few more code actions available in the form of a light bulb or a smart tag in older versions of Visual Studio. Use the context menu or a shortcut ctrl+, to open and apply an available action.\n\nSort Uses reorganizes use statements according to PSR-12 specifications. Statements are ordered alphabetically according to the used identifier. Uses of function and const declarations are grouped, and separated with a blank line. Note, that trailing comments and preceding comments are moved together with the corresponding use statement.\n\n\n\n\nRemove and Sort Uses is the same as Sort Uses. Additionally it removes any unused declarations. \n\n\nProperty setter, or getter, or both generates a function to get and\/or set the property value, known as getter and setter. The function gets annotated with the property documentary comment as well. By default, the setter returns the reference to the containing class, so they can be chain-called as well.\n\n\n\n\nGenerate construct generates a default __construct() method, with empty body.\n\n\n\nGenerate construct from defined properties is used to generate __construct() method that initializes all the class properties. Every property in the order as defined creates a constructor parameter which initializes the corresponding property.\n\nDebug\nThere are a lot new improvements in the PHP debugging experience. Now it handles fatal errors in the code better, showing the corresponding stack trace and navigating to the affected line of code in the editor. During the debug session, user will also get more information in the Visual Studio's Output pane. This should help with diagnosing and fixing issues with the debugging itself.\nFor remote debugging functionality (see Custom Server setting), Project Properties now provides more validations and help. The Path Mapping validates user's setting and provides completion when typing local paths.\n\nDBGp Proxy setting was also improved. It validates and checks the entered connection setting, with an option to verify the connection setting live.\nDiagnostics\nThere are a few more diagnostics reported live in your code. With the spread of the PHP version 8, there are more projects that stopped working. One of the causes is the use curly braces as array indexers. PHP editor now reports the use of curly braces as an array indexer, in case the language level is set to 8.0 or higher (in the future).\n\nA lot of new functions got added to PHP 8, and a lot of functions have been deprecated. PHP editor now reports use of deprecated or not available methods as warnings.\nTest Explorer\nThe Test Explorer has been updated as well. Now it scans the entire solution and lists all the PHPUnit configurations (except for test configuration in vendor folder). All the available tests get sorted and organized by available groups.\n\nThe feature allows to run and debug the tests, it remembers the previous tests results and displays them visually, including the test log, test output, and test duration. \nSince the April's update, this feature also works with the new Open Folder feature in Visual Studio 2019, so users don't have to create a project for their PHP application."},"2021\/php-tools-vs-code-march":{"title":"PHP Tools in VS Code (March 2021)","description":"Read the latest updates for PHP Tools in Visual Studio Code. We have been working on improving the performance, fixing debugging support, and providing more editor features as well.","content":"Read the latest updates for PHP Tools in Visual Studio Code. We have been working on improving the performance, fixing debugging support, and providing more editor features as well.\nThe latest installation package as well as the change-log can be always downloaded at devsense.com\/download or from the Visual Studio marketplace.\nRename Refactoring with Preview\nRenaming class members, such as methods and properties, was an anticipated feature - but not enabled until now. With the new Refactoring Preview Window, we could safely provide renaming for those constructs even the editor knows the changes may break your code.\n\nIn case any of the changes are not safe, which means the type information on the instance variable could not be fully resolved, the preview window popups automatically. In addition, renaming global variables and functions is now smarter, looking into dynamic constructs.\nRenaming with preview can be also opened with the menu Rename Symbol command, and confirming with the Shift+Enter key.\nEditor features\nWith the latest releases, we have also updated the integrated PHP manual in all major languages, describing well more of the new PHP 8 constructs.\nThe other improvements include:\n\n.phpstorm.metadata is properly parsed, and the included type information interpreted correctly by the editor and code analysis engine.\nUpon typing \/** above global and local variables, a neat PHPDoc is generated, with placeholders for type hints and descriptions.\n\n\n\nThe editor now correctly highlights occurrences of global variables under the cursor, as well as any other symbol such as function, methods, property, constant, etc.\nProblems window reports much fewer falsely detected problems. Note, to ignore certain folders from the problems reporting, see our documentation at docs.devsense.com\/en\/vscode\/problems.\nGo To Implementation has been improved to handle anonymous classes and traits.\n\nStability Fixes &amp; Optimizations\n\nDBGp Proxy now supports more protocols, including the binaries you can download from the xdebug.org website. More about setting DBGp Proxy in your workspace see docs.devsense.com\/vscode\/debug\/launch-json.\nThe pretty-printing feature has been improved to handle well various specific cases, such as grouping in &quot;use&quot; construct, or anonymous functions.\nWe are continuously working on performance improvements. Recent updates fix a lot of issues with the language server not being closed on macOS, or extensive consumption of CPU in the background. Thanks for all the great feedback we're getting!\n"},"2021\/php-tools-vs-march-2021":{"title":"PHP Tools for Visual Studio (March 2021)","description":"Read the latest news about PHP Tools for Visual Studio. We're happy to show you the newest features, code analysis enhancements, version updates, and more.","content":"IDE Enhancements\nIn Visual Studio 2019 and 2017, we now show the progress of indexing your project files (Indexing PHP files ...) in the Visual Studio's Background tasks panel. Although this usually takes just a second, it is good to see it's happening. Note that all the long-running tasks in Visual Studio should be listed here, it's not just PHP-specific.\n\nIn Visual Studio 2019, PHP Tools can analyze the entire solution for warnings, errors, informational diagnostics, and code cleanness. Those diagnostics are then listed in the Error List pane. Since most of the project code-base is contained in 3rd party packages, we have added an option to not analyze those packages (usually in the vendor folder). By default, only user files get analyzed and reported in Error List. This improves the readability and overall performance of the IDE.\n\nIn general, the project load times and overall editor performance were improved. You should notice more fluent and responsive editor experience. Although we'd be happy for any feedback related to the performance since our intention is to make the editor as smooth as possible.\nComposer\nThe recent release added support for the new Composer 2.0 JSON files and compatible composer packages. Composer 2.0 is also integrated into our composer manager. There we have improved and updated the UI for searching, browsing, and installing composer packages:\n\nIn addition, there is a new and faster composer packages tree view in your Solution Explorer. This shows the packages required by the project, the replaced packages, and contextual options to update packages to their latest versions.\n\nDebugger\nThe PHP debugger got interesting updates as well. It now suggests and automatically updates both the Xdebug extension to its latest version 3.0.2 and PHP 8.0 itself. The latest versions fix a few issues with breakpoints and the debugging stability itself, so you definitely want to update.\nFor anyone using the DBGp Proxy, you might be interested in the improved support of the DBGp Proxy version provided by xdebug.org itself. \nThe last major improvement to the debugging capabilities is the support for multiple projects debugging. It is now possible to debug more projects at once. \nEditor\nWe've got so much great feedback and ideas for our PHP editor, and we are working on it constantly. The first noticeable change is the tooltips - they are now shorter, omitting the namespace part of class names, allowing to click through to the definitions. In addition, if a URL is contained in the tooltip, it is now clickable as well.\n\nSince PHP 5.4 the editor has to deal with traits. Within a trait, the code completion offers not just the trait members but also members of all the classes that might use that trait. For that purpose, PHP Tools not only look for the @mixin PHPDoc annotation. Now the editor searches for all the usages of traits and the code completion lists anything possible without the need of declaring the @mixin tag.\nThe PHP code is full of magic __call methods, with the class annotated with @method tag. The editor is now able to find all the references of methods defined there.\n\nNext, there is the PHPDoc generation above global and local variables. Typing \/** above the variable will generate the pre-filled PHPDoc snippet.\nThe other improvements include greatly improved performance and an updated integrated PHP manual with more PHP 8.0 definitions.\nCode Analysis\nRecent releases are constantly improving code analysis. There are fewer falsely reported problems, updated PCRE syntax checking, improved type analysis, and improved support for .phpstorm.metadata file.\n\nCheck out our full change log and feel free to try the newest features at https:\/\/www.devsense.com\/download ! "},"2021\/how-to-install-laravel-in-visual-studio":{"title":"How to install Laravel in Visual Studio","description":"Creating a new Laravel project in Visual Studio.","content":"In this blog post I would like to demonstrate how to install Laravel in Visual Studio. I will use new project wizard which we have in PHP Tools for Visual Studio. \nOur goal here was to make this experience as simple as possible. The Laravel framework has certain requirements that you should install and configure first. But instead of googling the tutorial (like this one ;-) ). You should be able achive all of that just with few clicks directly in Visual Studio.\nCreating Laravel Project\n1. Click Create a new project\n\n2. Select PHP and choose PHP Web Project\n\n3. Name the project\n\n4. Select Laravel template\nI've PHP 8.0 for this project, which I don't yet have on my machine (Of course I do and you should too, but I just deleted it for this demo :-) ). I've checked Common Project System (VS 2019 only!), because it's much better than previous project system we've used since VS2010, even in it's current experimental state.\n\n5. Wait\nUAC will asks for permissions to continue. Accept and then wait so PHP Tools will do the work like downloading\/updating Composer, installing PHP, configuring Xdebug, enabling required extensions, ...\n\n... wait some more\n\n6. Laravel is installed\nThe Laravel is installed and configured at this point with all the requisities. You don't need to configure PHP project or install Laravel intellisense composer package ( laravel-ide-helper it helps the Intellisense engine to provide better code completion for Laravel) this is done transparently.\n\nTo verify if it's really installed, just press F5. You should see this page.\n\nAdding Laravel plugins\nOnce Laravel is installed, you may want to install one of many plugins. There are plugins that will provide you with great looking admin section, role based security, ecommerce features, etc. There is really a lot to choose from.\nYou can install any of those plugins directly within Visual Studio. Right click on Dependencies node in the Solution Explorer and select Install new composer package...\n\nLet's search for one that would take care of role based security. Type laravel permission and click Install Package. You can close this dialog now, it will install on the background. \n\nYou will know it's installed from the status bar or when Composer Output pane shows it's completed with exit code 0.\n\nConclusion\nWe've tried to make this experience as straight forward as possible. The Laravel is first complex framework template we have added to the new project wizard, but we are definitely going to add more of them. Please let us know how it worked for you or what other framework we should add next."},"2020\/how-to-setup-iis-for-php-development":{"title":"How to setup IIS for PHP Development with PHP Tools for Visual Studio","description":"","content":"When IIS Express isn\u2019t sufficient for your development needs and you need to get an full-fledged IIS web server for your PHP project, you can now configure it in matter of few clicks.\nIntroduction\nIf you\u2019ve ever wanted to set IIS up for PHP project, you will know that it\u2019s not exactly piece a cake.  PHP Tools for Visual Studio will do all of this for you, so feel free to skip to the next paragraph.\nThere is a bunch of resources out there on how to get this going manually ( e.g. https:\/\/docs.microsoft.com\/en-us\/iis\/application-frameworks\/scenario-build-a-php-website-on-iis\/overview-build-a-php-website-on-iis ), but here is the list of actions in short:\n\nInstall IIS\nInstall CGI module\nInstall PHP\nInstall Xdebug (optional if you want to debug)\nSetup handler for *.php\nSet default document to index.php\nCreate application, site and virtual directory\nMake sure IIS (or Application Pool Identity account) has permissions to access the project folder\nIf you have anonymous authentication allowed, make sure that NT user representing the anonymous user has also access to the project folder\n\nEach of those can be broken down into more detailed paragraphs, but I would rather watch funny cats videos on youtube.\nSetting it up\nWhen you have PHP project in Visual Studio. Go to project properties (right click on project node in Solution Explorer, choose Properties). Select Server tab, choose IIS decide what PHP runtime you want to run.\n\nThen click on the Issues found... link (or press F5 to run the project). The dialog will show issues that need to be solved in order for the project with given settings to run.  You can see that in my case it basically outlines first few points from the previous paragraph.\n\nClick Continue and give UAC blessing to each of those. After that there will be probably more stuff to configure, since your environment has changed now.  Pressing F5 again gave me the following set of issues:\n\nI'm missing permissions on the project folder and I have a different PHP handler set up (I've selected I want PHP 8.0). Clicking Continue again seemed to resolved everything and I can debug the project on IIS.\n\nSummary\nWe\u2019ve tried to simplify necessary steps that are required to configure your project to run on IIS server (IIS Express has been supported for a long time already). You should just setup the requirements you want and PHP Tools will configure your environment automatically in a way that will fulfill those."},"2020\/php-8-visual-studio-code":{"title":"PHP 8 in Visual Studio Code","description":"Developing with PHP 8 in Visual Studio Code - new editor features, new PHP constructs.","content":"PHP 8 represents a big milestone for developers, frameworks, and content management systems like WordPress. It introduces several new language constructs, that are not backward compatible with previous versions of PHP, it deprecates some functions, and there are some new eventual issues you should be aware of.\n\nThe Environment\nWhen developing with VS Code, you have to install PHP and Xdebug by yourself. In case you are running Windows and Microsoft Visual Studio, there is our One-Click installer for PHP.\nTo specify which PHP version should be used by the Visual Studio Code editor, change the VS Code's setting \"php.executablePath\" to point to the binaries. On Windows, it might be something like:\n{\n  \"php.executablePath\": \"C:\/Program Files (x86)\/IIS Express\/PHP\/v8.0\/php.exe\",\n}\nWhen opening a .php file, you will see several notifications about your PHP version. In the output window and the status bar.\n\nNamed Arguments\nNamed arguments is a new PHP 8 feature allowing to specify the name of parameter before provided the value. It allows to skip optional parameters, makes the code more readable, and also it works great with argument unpacking and call_user_func_array() function.\n\nIn Visual Studio Code, it is well understood by code completion, tool-tips, and code analysis as well. Misspelled arguments are underlined, since it would cause a fatal error in run time, type mismatches are checked as well. In case, user doesn't have PHP 8, any use of named arguments is underlined as well, since it is considered a syntax error on PHP 7.4 or older.\n\nCode completion provides available arguments including the detailed tool-tip information with type, default value, and description.\n\nAttributes\nSince PHP 8, instead of using PHP documentary comments (PHPDoc) developers can annotate functions, classes, interfaces, traits, properties, constants, and parameters with attributes. The advantage is a cleaner way of annotating things and the direct support in PHP reflection. All the reflection class get -&gt;getAttributes() method which returns an array of ReflectionAttribute instances. \nFollowing depicts the code completion of the attribute \"MyAttribute\" and then it's arguments $name and $value.\n\n&lt;?php\n\n$attributes = (new ReflectionClass(Grapes::class))-&gt;getAttributes();\n\n\/\/ or only get attributes with given name\n$attributes = (new ReflectionClass(Grapes::class))-&gt;getAttributes(\"MyAttribute\");\n\nforeach ($attributes as $myattr) {\n    print_r( $myattr-&gt;getArguments() ); \/\/ get original arguments\n    print_r( $myattr-&gt;newInstance() ); \/\/ instantiate \\MyAttribute class\n}\n\nCatch, Throw, Null-Safe operator, Match, ..\nThere are a few nice syntactic sugar enhancements, that might make your code smaller and more readable.\n\ncatch can be written without the catch variable\n\n\n\nthrow is an expression. Usually you can make use of it as a part of conditions.\nmatch construct is like switch but as an expression.\nconstructor properties allows to define a constructor parameter that at the same time defines a class property with the same name initialized implicitly with given value.\n\n\n\nnull-safe operator ?-&gt; allows to avoid null checking in expression chains. The operator respects short circuit evaluation rules, and it's especially useful for longer expression chains.\n\n\nThe Editor\nThe Visual Studio Code editor with PHP Tools respects and helps with the new PHP 8 features, including the new Xdebug 3 debugging extension support and other language constructs like the new union type hints and checking for compatibility if you haven't switched to PHP 8 yet and still using the version 7.4. Our integration is getting more updates soon, always keeping up to date with the latest standards."},"2020\/php-8-editor-in-visual-studio":{"title":"PHP 8 Editor in Visual Studio","description":"PHP 8 introduces new language constructs and new possibilities. Let's take a look at how the editor helps with getting into them.","content":"PHP 8 introduces a new syntax, more functions, and new standards. Let's have a look at how the editor in Visual Studio helps with those features. It will provide a detailed completion for named arguments, validates their use, checks the new syntax, warns about deprecations, and more.\n\nSyntax Checking\nWith PHP 8, developers will start using the new syntax options. It might be the trailing comma in function parameter list, attributes, match expression, throw expression, or catch without the variable. The editor reports all those usage in case the project is set for PHP version &lt;= 7.4.\n\nUpon switching the project to PHP 8.0, the warnings will be gone. \nNamed Arguments IntelliSense\nThe ability to specify the arguments by their name is a great feature that makes the code more readable, allows to skip parameters with default values, and may avoid some errors when there are too many arguments in a single function call. The editor however has a lot to do - there is code completion, that should provide list of available parameters, auto-complete the colon character if necessary, provide related parameter information, adjust the highlighted section of the signature helper, provide tool tips for named arguments, and more. Also it should report any unknown argument names.\n\nThe IntelliSense for named arguments features the following:\n\nrecognizes the function being called, and lists relevant parameters\nfor each parameter shows type information, documentation, and default value\ncompletes colon character if necessary\nhighlights the parameter in signature helper\nshows tool tip information for named arguments\nchecks the parameter exists\nchecks the provided value type matches\n\n#[Deprecated] Attribute\nFunctions used to be annotated with @deprecated PHPDoc tag. The code analysis across the project then reported all the usages of deprecated functions. Now with PHP 8 attributes, it is possible to annotate functions with #[Deprecated] attribute as well.\nSince attributes in PHP do not have to correspond to an existing class, and each code analyzer and code editor implements their own set of attributes, PHP Tools ignore the namespace of the #[Deprecated] attribute. It can be used in any of following forms:\n&lt;?php\n\n#[Deprecated]\n#[\\Deprecated]\n#[Deprecated(\"This will be removed, use new_function() instead.\")]\n#[Deprecated(reason: \"This will be removed, use new_function() instead.\")]\nfunction old_function()\n\n\nNew Diagnostics\nWith the new features there are new code validations. This might help developers to get into PHP 8 easier, and avoid unnecessary issues.\n\nUnknown named arguments would cause a fatal error. Also specifying a default value other than NULL or empty array to iterable parameters. \n\nIt is also important to remember, that mixed or void type hints cannot be used in combination with nullables - i.e. following is error: ?mixed, mixed|null, ?void, void|null.\nMatch Expression\nThe new match expression is well understood by the editor, and its type inference analysis.\n\nFunctions return value and variables get properly analyzed, so your code will get checked for eventual type mismatches.\n\nThe editor keeps in mind attributes, and constructor properties as well. IntelliSense fully support the new features since PHP Tools 1.40.12409 for all the major versions of Microsoft Visual Studio. Features are also supported for Visual Studio Code, although it looks differently and will be depicted in another blog post."},"2020\/installing-php-8-one-click":{"title":"Installing PHP 8, One Click","description":"This is how you install the newest PHP 8.0 automatically, including Xdebug 3.0 and related configuration.","content":"Even tho PHP 8 was officially released on November 26, 2020, you could already use its new syntax with PHP Tools before that date, and install PHP from sources. Now the release is available for the Windows platform and it can be installed on your development machine in an easy way.\nInstalling PHP 8 from Visual Studio\nPHP project in Visual Studio gets configured on the project properties page where you select the project server and the project language version.\n\nAfter selecting PHP 8, the code editor, code validation, and the entire IntelliSense will treat your code as PHP 8 compatible. Moreover, upon running the project (press F5 to run and debug), PHP Tools will ask you if you'd like to install the new PHP 8 including the corresponding debugging support (Xdebug 3).\n\nClick Continue and let the automatic installation to download and configure the necessary software for you.\n\nThat's it. The application is now running on PHP 8, you can put breakpoints, inspect variables, step through the code, and get full PHP 8 experience inside Visual Studio.\nWhat's new in PHP 8?\n\nThe new major version of PHP introduces performance improvements, consolidated error handling, new language features, and functions. Maybe most importantly, well known frameworks such as Laravel are upgrading and taking advantage of it. Let's list the most significant new features:\n\nAttributes: this new features allows developers to annotate their classes, functions, properties, and parameters in a declarative way. No more parsing PHPDoc comments. In the result, the code will get cleaner, avoiding errors in the annotation syntax, and also faster.\n\n\n\nUnion types: it is a common practice to allow more than one type of a parameter in PHP, to return several possible types, or to keep so called type-juggling in mind. Now it is possible to hint the value type with union of more types.\n\n  function juggle(int|float $number)\n\nOther syntactic enhancements: then you may appreciate the new match expression which is a switch but as an expression. Or throw as an expression, so you can write it as a part of conditional expressions. And more.\n\n\nThere is many more changes, see the official changelog for the complete information including the corresponding RFCs: https:\/\/www.php.net\/releases\/8.0\/en.php\n\nThe installation, debugging, and editor features are available to all Microsoft Visual Studio versions since 2010 up to the newest 2019."},"2020\/updates-visual-studio-november-2020":{"title":"Updates for Visual Studio (November 2020)","description":"The latest update of PHP Tools brings a lot of improvements and fixes for PHP in Visual Studio since 2010 up to the latest Visual Studio 2019. We're keen to show you a few of them.","content":"The latest update of PHP Tools brings a lot of improvements and fixes for PHP in Visual Studio since 2010 up to the latest Visual Studio 2019. We're keen to show you a few of them.\n\nNew PHP 8 Attribute Syntax\nAs the final PHP 8 release is getting closer, it seems we know the final syntax as well. During the alpha versions there were various RFCs with various syntaxes. The final one is the hash with square brackets, as on the image above. PHP Tools respects it, provides tool tips, IntelliSense, and compatibility check in case you use PHP &lt; 8.0.\n\nLaravel Project\nThere are a lot of improvements to either existing Laravel projects, or in case you are about to create a new one. The PHP Web Project wizard now provides a new project template - Laravel.\n\nThe new template creates an empty Laravel project, downloads and installs a selected version of PHP in case you don't have it, installs the appropriate version of Xdebug debugging extension, adds the Laravel composer package and the IDE helper package, and setups the project to be ready to run with the simple press of F5 key.\n\nImproved Code Analysis\nSeveral more code analysis rules were added including a check for unused parameters and properties initializers type mismatch.\n\nSuppressing Warnings\nYou can newly annotate a function or a class with @suppress PHPDoc tag. This tells the editor to ignore specified warnings. The allowed PHPDoc tags are @suppress or @SuppressWarnings followed by the error code.\n\nAdditionally, there is the new .editorconfig file support that allows specifying ignored error codes globally.\nCode Suggestions\nThe editor checks for common typos and provides quick-fixes for them. This mainly includes common PHPDoc tags typos. This helps to keep code well organized and helps the editor to better understand your code.\n\nAdditionally, the editor newly checks for type names in the context of its namespace context. In case you can make use of an existing use statement, it provides you with a suggestion.\nIIS Support\nProjects can be now configured to run on Internet Information Services (IIS). The virtual directory of choice will be configured automatically, and PHP installed and configured.\n\nOther Enhancements\nNewly, the @method tags are correctly interpreted, fully colored, including IntelliSense.\n\nAdditionally, the editor now understands Doctrine annotations, we have improved overall performance, fixed stability issues on Visual Studio 2012, and added new PHPDoc annotations for array types."},"2020\/php-tools-for-vs-code-november-2020":{"title":"PHP Tools for VS Code (November 2020)","description":"New PHP 8 attribute syntax, more code suggestions, more PHPDoc annotations, suppressing warnings, more quick code fixes, and improved code analysis; those are the highlights of the recent updates.","content":"We are keeping updating PHP Tools for VS Code. Scroll down and check out new features and improvements, we have added for the VS Code development platform.\nNew PHP 8 attribute syntax, more code suggestions, more PHPDoc annotations, suppressing warnings, more quick code fixes, and improved code analysis; those are the highlights of the recent updates.\n\nCode Suggestions\nNew quick fixes and name-checks lets you simplify your code in case it is possible. This takes into account the existing type aliases and namespaces.\n\nEventually, there are common typos in PHPDoc which are usually ignored by the IDE, and as a result, you are not benefiting from it at all. PHPTools recognize the common typos we've seen in various open-source projects, and lets you to fix them within a simple quick fix.\n\nPHPDoc annotations\nThe recent updates recognize a less common PHPDoc annotations for array types, such as bool[string] or array&lt;string&gt; or similar, sometimes used by various projects.\n\nAdditionally, it is now possible to suppress specified warnings in your code; for instance, the code above does not return a string as suggested in the PHPDoc - you can now suppress it so no warning will be generated for it.\nPHP 8 Attributes\n\nThe new version of PHP is coming. In case you're about to its new features, we got it covered. Attributes are supported by code completion, navigation, and code analysis. "},"2020\/phptools-vs-code-september-2020":{"title":"Updates for VS Code (September 2020)","description":"There have been a lot of updates and improvements to PHP Tools on VS Code. Check what's new and how it can help you with your PHP projects.","content":"There have been a lot of updates and improvements to PHP Tools on VS Code. Check what's new and how it can help you with your PHP projects.\nIn short, there is the support for PHP 8.0 syntax, new diagnostics, quick fixes, improved tooltips, support for &quot;Go To Implementation&quot; command, performance and code analysis improvements, PCRE syntax checker, Test Explorer improvements, and more.\n\nGo To Implementation\n\nVS Code introduces a useful command for quickly going to function overrides, interface implementors, or class sub-classes. It is fully supported and provides you workspace-wide search for implementations.\nPCRE pattern check\n\nThe code may be full of regullar expressions; and it's very easy to make a mistake. In addition to syntax highlighting, PHP Tools now validates the syntax for you and shows additional diagnostics in case anything may be wrong.\nPHP 8.0 syntax\n\nThere is an upcoming big release of PHP 8.0. The editor now supports the entire PHP 8.0 syntax including:\n\nnon-capturing catches: try { .. } catch (Exception) { ... }\nattributes: #[PhpAttribute]\nnull-safe operator: ?-&gt;\nunion types\nmixed type, static type\nmatch expression\nconstructor property promotion\nthrow expression\n::class on objects\ntrailing comma in the parameter list\n\nNote, in order to actually use the new syntax, you'll need the PHP 8.0 beta installed. Until then, the editor will report all the new features usage as problems.\nQuick Fixes\n\nWe have added several new quick fixes for common problems, and also a few refactoring quick actions. Now you can generate getters and setters for properties, shorten class names if possible, or implement missing abstract functions or whole interfaces.\nAnd more ...\nAll the other fixes, new features, and improvements are listed in the changelog. "},"2020\/php-tools-september-2020":{"title":"PHP Tools Updates (September 2020)","description":"The release brings features and enhancements for developing in PHP using Microsoft Visual Studio.","content":"We are happy to announce the public availability of updated PHP Tools for Visual Studio. The release brings features and enhancements for developing in PHP using Microsoft Visual Studio.\n\nPHP 8.0 Support\n\nThe editor supports the entire (so-far known) PHP 8.0 syntax, including match expression, null-safe operator ?-&gt;, throw expression, constructor properties, catch without a variable, etc. The IntelliSense and code diagnostics are fully aware of PHP 8.0 and will help you to take advantage of the new features in the future. In case, you don't have a beta release of PHP on your PC yet, the editor will report the new constructs as unsupported.\nVisual Studio 2019 Diagnostics\n\nSince the Visual Studio 2019, the Error List shows all the problems across the entire project. Although, it might get overwhelming. Either some of the issues might be known and ignored, or they might be caused by a package you use and you can't fix it anyway. Sometimes, developers want the exact opposite - all the informational diagnostics to be reported strictly as errors, for example within your test files or in a crucial part of the code base.\nNow all the diagnostics can be filtered and their severity configured using the .editorconfig file. Read more about the configuration at https:\/\/docs.devsense.com\/en\/vs\/code%20validation\/configuration.\n@dataProvider phpDoc tag\n\nTests are crucial part of the project development. The PHP editor will now analyze and provide IntelliSense to @dataProvider tags used by PHPUnit.The feature provides tool tips, reports non-existing data provider function, or completes the data provider name for you.\nGo To Implementation (VS 2019)\n\nSince the Visual Studio 2019, you can jump to the list of implementations of a function, interface or a class. This is a useful command allowing to list all the overrides and extended classes with from the editor.\nMore features\nThere are tons of new features added recently. The interesting ones are:\n\nbrowsing and debugging PHAR archives\nPCRE patterns validation\nnew SSH, FTSP, and SFTP protocols supported by project publish\nsupport for styles in &quot;.editorconfig&quot; file\nimprovements to code analysis and type analysis\nimproved IntelliSense - e.g. after &quot;use&quot; in namespaces and in traits\nall the PHP 7.4 and PHP 8.0 features in the PHP editor supported\ncode diagnostics for magic functions\nfull support for phpstorm meta file\n\nBug fixes and more enhancements\nThe latest updates fix hundreds of issues, improve stability and performance. We strongly encourage to check out the changelog at devsense.com\/download, and update your PHP Tools to the latest version."},"2020\/remote-debugging":{"title":"How to setup PHP remote debugging","description":"In this tutorial, I'm going to demonstrate how to setup remote debugging in PHP Tools for Visual Studio. The remote system in this example is running on Ubuntu, but it can be any Linux or Windows system.","content":"In this tutorial I'm going to demonstrate how to setup remote debugging in PHP Tools for Visual Studio. The remote system in this example is running on Ubuntu, but it can be any Linux or Windows system.\nConfigure remote system (Ubuntu)\nThis is actually the hardest part, but if you have your remote system configured properly you can skip this one.\nInstall Apache and PHP\n\n\nFirst you will need to install a web server and PHP. I'm going to install Apache, but feel free to install the web server of your preference.\nsudo apt-get update\nsudo apt-get install apache2\nsudo apt-get install php\nsudo apt-get install libapache2-mod-php7.0\n\n\nGet Xdebug\nsudo apt-get install php-xdebug\n\n\nTurn Xdebug on. Open php.ini. I will use nano to edit text files in this tutorial, but feel free to use editor of your choice.\nsudo nano \/etc\/php\/7.0\/apache2\/php.ini\nAppend these lines to the end of the file:\n[Xdebug]\nzend_extension=xdebug.so\nxdebug.remote_enable=1\nxdebug.remote_host=192.168.100.9\nxdebug.remote_port=9000\nYou will need to alter remote_host option in this snippet. Change it to the IP address of the machine with Visual Studio. In my case IP address was 192.168.100.9.\n\n\nFor the sample project from this tutorial you are going to need these PHP extensions.\nsudo apt-get install php-xml\nsudo apt-get install php-mbstring\n\n\nCreate a site on Apache\n\n\nCreate directory\nsudo mkdir \/var\/www\/example.org\n\n\nCreate a site on Apache.\nsudo cp \/etc\/apache2\/sites-available\/000-default.conf \/etc\/apache2\/sites-available\/example.org.conf\nsudo nano \/etc\/apache2\/sites-available\/example.org.conf\n\n\nThe newly created file will look something like this (I've removed the comments so it's shorter):\n&lt;VirtualHost *:80&gt;\nServerAdmin webmaster@localhost\nDocumentRoot \/var\/www\/html\nErrorLog ${APACHE_LOG_DIR}\/error.log\nCustomLog ${APACHE_LOG_DIR}\/access.log combined\n&lt;\/VirtualHost&gt;\n\n\nFor this example I've chosen the site name example.org, so change the configuration file to:\n&lt;VirtualHost *:80&gt;\nServerAdmin admin@example.org\nServerName example.org\nServerAlias www.example.org\nDocumentRoot \/var\/www\/example.org\nErrorLog ${APACHE_LOG_DIR}\/error.log\nCustomLog ${APACHE_LOG_DIR}\/access.log combined\n&lt;\/VirtualHost&gt;\n\n\nEnable site\nsudo a2ensite example.org\n\n\nRestart Apache\nsudo \/etc\/init.d\/apache2 restart\n\n\nInstall FTP server\nNow you have a site, but you will also need a way to get the your php from development machine to the server. One option is to setup FTP server. I'm going to install Vsftpd; an FTP daemon available in Ubuntu. It is easy to install, set up, and maintain. \n\n\nRun the following command:\nsudo apt install vsftpd\n\n\nStart and enable the service with the commands:\nsudo systemctl start vsftpd\nsudo systemctl enable vsftpd\n\n\nCreate FTP user\nCreate a user for the FTP service. This could be considered an account for generic FTP usage. You can always create more, and anyone with a user account on the server can log via FTP. \n\n\nThe user will be called ftpuser and is created with the command:\nsudo useradd -m ftpuser\n\n\nSet the user's password with the command:\nsudo passwd ftpuser\n\n\nSetup previously created directory as home directory for ftpuser\nsudo usermod -d \/var\/var\/www\/example.org ftpuser\n\n\nAdd permissions\nsudo chown ftpuser \/var\/www\/example.org\nsudo chmod -R 755 \/var\/www\/example.org\n\n\nConfigure VSFTP\n\n\nCreate a brand new configuration file. Before you do that, let's save the original with the command:\nsudo mv \/etc\/vsftpd.conf \/etc\/vsftpd.conf.orig\n\n\nCreate the new file with the command:\nsudo nano \/etc\/vsftpd.conf\n\n\nPlace the following to the vsftpd.conf:\nlisten=NO\nlisten_ipv6=YES\nanonymous_enable=NO\nlocal_enable=YES\nwrite_enable=YES\nlocal_umask=022\ndirmessage_enable=YES\nuse_localtime=YES\nxferlog_enable=YES\nconnect_from_port_20=YES\nchroot_local_user=YES\nsecure_chroot_dir=\/var\/run\/vsftpd\/empty\npam_service_name=vsftpd\nrsa_cert_file=\/etc\/ssl\/certs\/ssl-cert-snakeoil.pem\nrsa_private_key_file=\/etc\/ssl\/private\/ssl-cert-snakeoil.key\nssl_enable=NO\npasv_enable=Yes\npasv_min_po"},"2019\/what-i-like-about-php-tools-and-black-friday-2019":{"title":"What I like about PHP Tools and Black Friday 2019","description":"I'm more C# developer so I feel like at home in Visual Studio. When I do things in PHP and I do them often I'm very happy to stay in VS. In this post I wanted to write few things which I like about PHP Tools.","content":"I'm more C# developer so I feel like at home in Visual Studio. When I do things in PHP and I do them often I'm very happy to stay in VS. In this post I wanted to write few things which I like about PHP Tools.\nDisclaimer: I do work on PHP Tools so my opinion might not be objective :-)\nMemory relief\nIt's quite hard to remember all classes and function signatures from PHP libraries or from the project you are working on. It saves me ton of time that I get immediate tooltips with correct signatures and documentation for the stuff I'm currently writing.\n\nI don't write any mistakes\nWell, actually I do and I'm glad that I get corrected immediately. There are a bunch of code validation features https:\/\/blog.devsense.com\/2016\/12\/codevalidation which are extremely helpful. Even in the code that is already written I'm able to find potential problems. E.g. when PHP 7.4 came out PHP Tools helped me to identify code that needed to be altered to play nicely with all the PHP 7.4 changes.\n\nNavigate quickly through the code\nWhen I work with an open source project mostly, I'm trying to get to know the code. Having the ability to navigate through the code quickly is just a must. F12 (Go To definition) or Shift+F12 (Find All references) are my best friends in this case. \n\nFind the bugs early\nRunning test directly from within the IDE is also time saver. I can see immediately what my changes just broke and I can fix it before committing it. I like finding those bugs right after writing them, that way I will not have to find them later when customers told us &quot;it's doing something weird&quot;.\nFind out more about unit testing https:\/\/blog.devsense.com\/2017\/06\/unit-testing\n\nGet it out\nIf you use git or TFS you can just commit your changes right in the IDE clicking on the correct button. Same applies if I want to publish it directly to the server.\n\nDebug the bugs\nWhen a customer writes us &quot;It doesn't work&quot; and he is so kind to add information about how to reproduce the issue. I just run the project in debug mode (F5), put a breakpoint on the line where I think code doesn't behave as it should, explore the state of the program, step around (Step Over F10, Step Into F11, Step Out Shift+F11), I change few variables (btw. since latest version it's possible to change even private fields). This usually helps to identify the cause of the issue.\n\nThere are many details that help a lot. e.g. exploring huge array is very fast, or tracepoints are handy in certain situations https:\/\/blog.devsense.com\/2019\/php-tracepoint-logpoint .\nYou can check this post if you want to know more debugging tips in greater detail https:\/\/blog.devsense.com\/2017\/07\/advanced-debug. \nOther little things\nInteroperability with other VS extensions, a lot of them being written by Mads Kristensen https:\/\/marketplace.visualstudio.com\/publishers\/MadsKristensen\nI also use Spell checking extension https:\/\/blog.devsense.com\/2016\/07\/spell-checking , because ... I need it.\n\nThat\u2019s it\nI mentioned couple of things I like about PHP Tools for Visual Studio. Mainly I wrote it with Visual Studio in mind, but majority of it applies to VS Code as well. And obviously, I didn't mention all of it, but you can try it yourself.\nHere you can download FREE Trial and if you decide you like it you can use the coupon BlackFriday19 to get 50% off the Personal license. This coupon is valid until December 7th 2019."},"2019\/php-tools-updates-october-2019":{"title":"PHP Tools Updates (October 2019)","description":"This recent release brings new enhancements and features for developing in PHP in Visual Studio or Visual Studio Code","content":"We are happy to announce the public availability of our updated PHP Tools\u00a0for\u00a0Visual Studio and Visual Studio Code. This recent release brings new enhancements and features for developing in PHP using Microsoft Visual Studio.\nPublish files when changed\nIn some scenarios, it is useful to upload your local changes immediately to the cloud. Now it's possible to enable this behavior in your project properties. Create a publish profile and choose when your changes will be published. This feature is only available in Visual Studio, from 2010 up to 2019.\n\n\nThe debugger allows you to edit private object properties\nDue to the internals of the PHP debugger, it was not possible to change the private property value in Watch, Locals or Watch Tooltips. The recent update of PHP Tools works around this limitation so you can freely edit values as you expected to do. This is not yet enabled for Visual Studio Code - but stay tuned!\n\n\nNew composer integration\nVisual Studio 2019 got a new composer engine underneath. The tree with all the composer dependencies in your solution explorer has been highly optimized. Also, you'll be notified if any of the composer packages are missing. PHP Tools allows you to install them on the background with a single click, while you keep on working.\n\n\nCheck for not implemented abstract functions\nIn addition to hundreds of various diagnostics, PHP Tools now checks that every non-abstract class implements all the abstract functions. The editor allows you to know all the details and warns you before having to debug. This feature is enabled in Visual Studio Code and also in Visual Studio 2019. Older editions will be supported in our next update.\n\n\nRich tooltip experience\nThis one goes for all Visual Studio 2019 users - tooltips are now clickable allowing you to jump directly to classes, traits and interfaces. Also, now there are clickable @link annotations and links to the online documentation if available. This greatly enhances productivity letting you navigate through your code even more intuitively.\n"},"2019\/php-7.4-vs-code":{"title":"PHP 7.4 Support in VS Code","description":"Support for PHP 7.4 and more","content":"PHP Tools for VS Code\nPHP Tools includes support for the new PHP 7.4, including:\n\nEditor support for all PHP 7.4 syntax such as:\n\nArrow Functions\nPHP 7.4 Array support updates:\nSpread arrays\nArray returns\nPHPDoc updates including array commenting\n\nIntellisense updates that include Serialization support\nNotifying users on depreciated functions\n\nIntellisense Updates\nTo keep up with the PHP 7.4 syntax, PHP Tools has been updated to handle all syntax updates.  Some of these updates:\n\nArrow functions (using the fn command)\nTyped Properties\nArray references\nSerialized objects.\n\nArrow Functions\nArrow functions, otherwise known as anonymous functions, allow developers to quickly define a function, the parameters, and the return value in one line.  For example:\n$squarethis = 9;\n\n$squared = fn($square) =&gt; $square * $square;\n\necho \"&lt;p&gt;Number to be squared: $squarethis.&lt;\/p&gt;\";\n\necho \"&lt;p&gt;Squared number: .\" $squared($squarethis).\".&lt;\/p&gt;\";\n\nTyped Properties\nPHP, like other scripted languages, has supported the ability to have variables which its data type (integer, string, etc) was derived based on the context.  So setting a variable from $i = 5; and then $i = \"5Bob\"; are equally valid.\nPHP 7.4 allows more control with scalar types and return values, allowing user to specify exactly what kind of data they are receiving and sending back.  PHP Tools is able to parse this syntax, and even return errors when detected.  For example:\n$squarethis = 9;\n\n$squarebad = \"Test\";\n\nfunction SquareValue(int $newNumber) : int\n{\n    return $newNumber * $newNumber;    \n}\n\necho \"&lt;p&gt;Using SquareValue function: \" . SquareValue($squarebad) . \".&lt;\/p&gt;\";\n\nArrays\nArray Functions and Array Commenting\nPHP Tools ability to resolved typed properties for variables and functions extends to arrays as well, and will issue warnings when arrays are expected and a different typed value is submitted:\n\/**\n * Returns an array from $countdown down to 0.\n * @param int $countdown\n * @return array\n *\/\nfunction ReturnArrayofValues(int $countdown) : array\n{\n    $list = array();\n    for (; $countdown &gt;= 0; $countdown--)\n    {\n        $list[] = $countdown;\n    }\n    return $list;\n}\n\n\/**\n * Prints an array of integer values in order\n * @param array $list\n *\/\nfunction PrintArrayofValues(array $list)\n{\n    echo \"&lt;p&gt;\";\n    foreach($list as $item)\n    {\n        echo \"&lt;br&gt;$item\";\n    }\n    echo \"&lt;\/p&gt;\";\n}\n\nPrintArrayofValues(ReturnArrayofValues(10));\n\nSpread Arrays\nA new feature in PHP 7.4 is spread arrays, similar to how they work in JavaScript.  For example, previously arrays would have to be copied and expanded like so:\n    $a = array(1, 2, 3);\n    $b = $a;\n    $b[] = 4;\n    $b[] = 5;\n    $b[] = 6;\n    print_r($b);\n    \/\/output:\n    \/\/Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 [3] =&gt; 4 [4] =&gt; 5 [5] =&gt; 6 )\nThe new spread method allows users to easily copy arrays into other arrays, or reference entire array elements at once:\n    $c = array(1, 2, 3);\n    $d = [...$c, 4, 5, 6];\n    print_r($d);\n    \/\/output:\n    \/\/Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 [3] =&gt; 4 [4] =&gt; 5 [5] =&gt; 6 )\nSerialize signatures\nWith PHP 7.4, the new standard for serialization is based on two new magic functions that developers can define within their class:\n\n__serialize:  Returns an array value that can then be parsed into a text string.\n__unserialize: Takes the serialized array object and assigns the class members value from that array.\n\nWith PHP Tools, developers are provided with helpful information processing these new magic functions.  For example:\n\n\nDepreciated Function Reporting\nPHP 7.4 has depreciated a number of functions.  Rather than guess what functions have been depreciated, PHP Tools lets you know which are still valid, and which need to go from your code:.  Items that have been tagged with @depreciated will have an error display in the IDE, and will show that status on on a mouse-over:\n\n\nRelated Articles\nPHP 7.4 support for Visua"},"2019\/php74-visual-studio":{"title":" PHP 7.4 Support for Visual Studio","description":"Support for PHP 7.4 and more","content":"PHP Tools for Visual Studio\nPHP Tools includes support for the new PHP 7.4, including:\n\nInstallation with Visual Studio\nEditor support for all PHP 7.4 syntax such as:\n\nArrow Functions\nPHP 7.4 Array support updates:\n\nSpread arrays\nArray returns\nPHPDoc updates including array commenting\n\n\nIntellisense updates that include Serialization support\nNotifying users on depreciated functions\n\nInstall with Visual Studio\nPHP Tools supports installing PHP 7.4 right from within Visual Studio.  From within a Visual Studio PHP project:\n\nSelect the project properties (Right click the project, select Properties).\nUnder Application, select &quot;Language Level&quot; and set it to 7.4.\nSave the settings.\nSelect Debug -&gt; Run or select F5 and PHP Tools detects if PHP 7.4 and Xdebug for PHP 7.4 is installed.  If not, it prompts the user to install it.\n\n\nIntellisense Updates\nTo keep up with the PHP 7.4 syntax, PHP Tools has been updated to handle all syntax updates.  Some of these updates:\n\nArrow functions (using the fn command)\nTyped Properties\nArray references\nSerialized objects.\n\nArrow Functions\nArrow functions, otherwise known as anonymous functions, allow developers to quickly define a function, the parameters, and the return value in one line.  For example:\n$squarethis = 9;\n\n$squared = fn($square) =&gt; $square * $square;\n\necho \"&lt;p&gt;Number to be squared: $squarethis.&lt;\/p&gt;\";\n\necho \"&lt;p&gt;Squared number: .\" $squared($squarethis).\".&lt;\/p&gt;\";\n\nTyped Properties\nPHP, like other scripted languages, has supported the ability to have variables which its data type (integer, string, etc) was derived based on the context.  So setting a variable from $i = 5; and then $i = \"5Bob\"; are equally valid.\nPHP 7.4 allows more control with scalar types and return values, allowing the user to specify exactly what kind of data they are receiving and sending back.  PHP Tools is able to parse this syntax, and even return errors when detected.  For example:\n$squarethis = 9;\n\n$squarebad = \"Test\";\n\nfunction SquareValue(int $newNumber) : int\n{\n    return $newNumber * $newNumber;    \n}\n\necho \"&lt;p&gt;Using SquareValue function: \" . SquareValue($squarebad) . \".&lt;\/p&gt;\";\n\nArrays\nArray Functions and Array Commenting\nPHP Tools ability to resolve typed properties for variables and functions extends to arrays as well, and will issue warnings when arrays are expected and a different typed value is submitted:\n\/**\n * Returns an array from $countdown down to 0.\n * @param int $countdown\n * @return array\n *\/\nfunction ReturnArrayofValues(int $countdown) : array\n{\n    $list = array();\n    for (; $countdown &gt;= 0; $countdown--)\n    {\n        $list[] = $countdown;\n    }\n    return $list;\n}\n\n\/**\n * Prints an array of integer values in order\n * @param array $list\n *\/\nfunction PrintArrayofValues(array $list)\n{\n    echo \"&lt;p&gt;\";\n    foreach($list as $item)\n    {\n        echo \"&lt;br&gt;$item\";\n    }\n    echo \"&lt;\/p&gt;\";\n}\n\nPrintArrayofValues(ReturnArrayofValues(10));\n\nSpread Arrays\nA new feature in PHP 7.4 is spread arrays, similar to how they work in JavaScript.  For example, previously arrays would have to be copied and expanded like so:\n    $a = array(1, 2, 3);\n    $b = $a;\n    $b[] = 4;\n    $b[] = 5;\n    $b[] = 6;\n    print_r($b);\n    \/\/output:\n    \/\/Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 [3] =&gt; 4 [4] =&gt; 5 [5] =&gt; 6 )\nThe new spread method allows users to easily copy arrays into other arrays, or reference entire array elements at once:\n    $c = array(1, 2, 3);\n    $d = [...$c, 4, 5, 6];\n    print_r($d);\n    \/\/output:\n    \/\/Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 [3] =&gt; 4 [4] =&gt; 5 [5] =&gt; 6 )\nSerialize signatures\nWith PHP 7.4, the new standard for serialization is based on two new magic functions that developers can define within their class:\n\n__serialize:  Returns an array value that can then be parsed into a text string.\n__unserialize: Takes the serialized array object and assigns the class members value from that array.\n\nWith PHP Too"},"2019\/phar-archives-in-visual-studio-code":{"title":"Phar archives in VS Code","description":"This new feature of PHP tools allows you to look at the source code in Phar archives","content":"\nHave you heard about phar archives? They're an easy and convenient way of distributing and installing a complete PHP application in a single file. Usually, if you're using a phar archive, you don't know what's inside of it, because most PHP editors won't let you look at the source code.\nThe good news is that  since September 2019, PHP Tools for VS Code comes with this new feature, which allows you to peek into any phar archive and work with the code contained in there. And while you inspect the file, PHP Tools will still continue to analyze the code, allow you to &quot;jump to definition&quot; and work with all its other features.\n\nCode completion and help for Composer library bundled in a Phar archive\nIn this video we'll give a short explanation of the phar archives and how PHP Tools can help working with them in Visual Studio Code.\n"},"2019\/debugging-in-visual-studio-code":{"title":"Debugging PHP in Visual Studio Code","description":"How to debug your PHP code in VS Code","content":"If you read our Award Winning article (well, my Mom liked it) about how to use PHP Tools with Visual Studio, you'll understand that we didn't want to make the good people who enjoy using Visual Studio Code with PHP Tools left out, so we want to demonstrate how to debug your code on that platform.\nTracking down what's going on in your code\nFirst, we'll assume that you have Visual Studio Code installed with PHP Tools. In this environment, we're running PHP 7.2, but PHP Tools is already updated to work with the new PHP 7.4.  \nWe're also assuming that you have some code to debug.  Maybe some amazingly written code like this:\nclass Person\n{\n    public $firstName;\n    public $lastName;\n    public $yearOfBirth;\n\n    public function getCurrentAge()\n    {\n        $currentYear = (new DateTime)-&gt;format(\"x\");\n        return $currentYear - $this-&gt;yearOfBirth;\n    }\n\n    public function __toString()\n    {\n        return \"&lt;p&gt;First Name: $this-&gt;firstName\\n&lt;br&gt;Last Name: $this-&gt;lastName\\n&lt;br&gt;Current Age: \".$this-&gt;getCurrentAge().\"&lt;\/p&gt;\";\n    }\n}\nPeople out there who are really clever can already spot problems with this code.  But we'll use it anyway as a base for showing off how clever PHP Tools is at debugging.\nStarting the Debug Process\nThe easiest way to run a PHP Project in Visual Studio Code is to import it as a separate folder in your workspace.  This way your debug configuration settings can be contained at the folder level.  Visual Studio Code keeps those in a hidden directory within the folder called .vscode.  Like so:\n\nTo start debugging in Visual Studio Code:\n\nSelect the code to debug - in this case, index.php.\nSelect the Debug icon on the left panel.  From the Configuration drop down, select the directory that serves as the project root and select the Configure icon.\nNow to run the configured debugging session, to run it, just select that configuration from the drop down list, and select the Run icon.\n\n\nFor this example, we'll be using the Built-In Server, which already reports useful debugging information back to Visual Studio Code.  Let's run our code, and watch it blow up before our eyes.\nDebugging by Exception\nCode that contains errors that cause exception errors are automatically tracked with the built-in server.  Take this piece of code:\n$currentYear = (new DateTime)-&gt;format(\"x\");\nWe already know this code will blow up and give you nasty exception errors that usually don't make sense unless you're an expert in PHP already.  And sure enough, when we run it, it does!  Visual Studio Code with PHP Tools is kind enough to tell us just what's wrong with our code in a simple layout where we can explore just what's happening and where.  Look at all of these beautiful errors:\n\nHere's a quick rundown of the different areas:\n\nVariables list:  The values of variables at this break point.  Users can drill down into objects, arrays, and the like to capture the current values.  By double clicking on them, the values can be changed before the program is continued.\nWatch list:  Specific expressions to watch for.\nCall Stack:  The chain of methods being called.  For example, in this view, main calls the function Avengers-&gt;__toString, which then calls Person-&gt;__toString, etc.  \nBreakpoints:  What triggers the code to stop so it can be examined.  Breakpoints can be added manually (we'll have more details on that below).\nCode:  The actual code.\nDebug Console:  Messages generated by the debugging system.\n\nNearly everything a developer needs to understand why their code blew up is right there in front of their eyes.  In this case - oh, we have a non-numeric value where we need a value.  Silly us - we had an &quot;x&quot; in our date format program.\nI actually prefer this view of the one in Visual Studio - maybe because everything is laid out right there on the side for review.  \nTo resume our code, either select the Play icon at the top, or press F5.\nAdding Breakpoints\nSupport our code doesn't generate"},"2019\/debugging-php-in-visual-studio":{"title":"Debugging PHP in Visual Studio","description":"Get started with some basic debugging","content":"Overview\nFinding the one mistake in your code can be the most frustrating thing in the world. And PHP Tools is great at finding syntax errors, like when there's an extra comma or a variable is referencing an incorrect type (Download a free, fully-functional version for 30 days).\nThen, there are the times when the syntax is perfect, PHP Tools isn't returning any errors, but things just aren't working the way you think they should. \n\nThat's when you need to start debugging, and watching the code is the best way to finding out exactly what's going wrong.\nWe're going to work through a really simple example on how to use PHP Tools for debugging in Visual Studio, so when you run into those problems that have you connecting head to desk, you can see exactly what to do and how to fix it.\nDebugging Examples\nWe're going to assume that your code actually runs without blowing up, but executes just doesn't return what you want.  But we'll do it both ways - first by when the code just blows up and you want to see what's wrong, then showing code that runs just fine but gives the wrong result.\nEither way, when running your code with PHP Tools, you'll be able to handle the syntax issues before you ever run your code, and be able to follow it through to see what's happening inside.\nTracking From Exception Errors\nLet's start with code that just blows up.  Like this one:\npublic function getCurrentAge()\n{\n    $currentYear = (new DateTime)-&gt;format(\"X\");\n    return $currentYear - $this-&gt;yearOfBirth;\n}\nIf you're like me, might have forgotten that &quot;X&quot; is not a valid date format.  So when we run this code, Visual Studio and PHP Tools let's us know - &quot;no.  That is not right:&quot;\nOnce the exception error comes up, we can use the Call Stack and expand the different class instances and related variables to see just what their error is.  This problem is easy enough to solve once we see the error - we're trying to get a person's age by subtracting their year of birth from the current year.  Only - our code isn't working.  When we go to run it, we see some issues:\n\nAs you can see in the example, we can use our Watch window to see what's going on.  We can specify by variable name (like we have listed here under the Watch 1 tab, where we tell PHP Tools and Visual Studio to look for $this-&gt;yearOfBirth), or we can select the Autos to get a look at all of the variables available to us in this call.\nOn the other side, we have the Call Stack, telling us exactly where in our code we are.  This is really handing in exploring &quot;What line is our code blowing up at?&quot;  It tells us right here:  We're currently on Line 13, and we jumped there from Line 18, which was launched from Line 51, and it all started from line 61.  So we can look at each spot and see where there's an issue.  And sure enough - we look at our variables and see - oh, we're trying to subtract the year &quot;Peggy&quot; from the year &quot;2019&quot;.  Somehow, that doesn't sound like proper math:\n\nWe can fix this - we set the year of birth to 1918, and everything works like it should.\nTracking from Break Point\nBreak Points one of the most effective ways to debug your code.  If you're also thinking &quot;Isn't Break Point of the greatest movies of all time?&quot;\nYes.  You would be right.\n\nBut tear your attention away from the sights of baby Keanu Reeves and focus on fixing the code.  A Break Point in your code is telling the IDE &quot;When you reach this point - stop and let me see what's going on.&quot;  From there, you can look at your Watch list or Call Stack and see what's going on.\nTo set a Break Point, pick a spot within your code and either press F9 or select Debug-&gt;Toggle Breakpoint:\n\nNow when you run your code, it'll stop on that break point.  As you can see in the example, from here you can do several commands such as:\n\nStep Into:  Proceed to the next step in the process and show what line we're on, and what the values of items in the Watch list are.\nStep O"},"2019\/installing-and-user-composer-for-php":{"title":"Installing and using Composer for PHP","description":"Download and install all the dependencies you need","content":"Requirements\n\nPHP (PHP 7 is used for this example)\nVisual Studio IDE (2019 is used in the examples below)\nPHP Tools (free 30-day trial)\n\nAt the core of every programmer is someone who is lazy.  This isn't a bad thing - if you recall the Heinlein short story &quot;The Tale of the Man Who Was Too Lazy to Fail&quot;, it involved a man who really didn't want to work.  So, he looks over how things are done to make them easier on himself rather than doing it the same laborious method as his counterparts.\nThis is the heart and soul of every good programmer. We want the computer to do the work for us.  We could manually count how many times the word &quot;spam&quot; appears in a document.  Or we can make a function that does that for us.  The history of great programmers is that of someone saying &quot;Yeah, I'd rather not do that myself, I'll just make it easier.&quot;\nThe Composer framework lets you install components rather than inventing everything from scratch.  Not only does it help with installing &quot;packages&quot; (pre-created libraries and components), but they also resolve any dependencies.\nFor example, suppose that we want to send emails.  Sure, we could:\n\nCreate our own PHP based connection to a SMTP process, figure out the proper commands on how to format our mail message, handle authentication and encryption\nInstall an email sending package like Swiftmailer!  First, we download it manually.  Oh - but it also requires email-validator to run.  And polyfill.  And if there's an upgraded version in the future, then we'll have to make sure we don't install the wrong dependencies because then that might break what we have.\nOr we use Composer, specify that we want to install Swiftmailer, and it will download and install the correct dependencies for us.\n\nI'm lazy.  Let's go with the last option.\nInstalling and using Composer isn't that difficult.  There's three phases:\n\nInstall Composer.\nInstall the desired packages.\nUse the Composer packages in your code.\n\nWe'll be using Swiftmailer as our example, but check out all of the packages available from sites like Packagist.  There's ones for handling your log files, for handling files, handling messages - odds are, there's somebody out there who had a problem, solved it, and then published their package for other lazy people to use.\nInstalling Composer\nInstalling Composer into your project is made really easy when you're using Visual Studio with PHP Tools.  The instructions are at https:\/\/docs.devsense.com\/en\/vs\/project\/composer, but we'll show them in action.\nFirst, create a project in Visual Studio and make sure it's a PHP project:\n\nStart Visual Studio.\nSelect File, then Project.\nSpecify the project as PHP Web Project.\nGive it a name and location.  For this sample, we're just going to go with an empty web site.\n\nNow we can install our Composer packages.  \n\nRight click on References, and select &quot;Install New Composer Package&quot;.\nType in the package to install.  We're going to use Swiftmailer, so our example has that.\nAnd Install!\n\nUnderstanding Composer\nSo we've installed Composer.  That's all well and good, but what is actually going on?\nPHP Tools is kind enough to show in our References section the packages installed.  And if you look in the project - there's a file there called composer.json.  If we opened it up, we'll see how Composer knows what to install:\n{\n    \"require\": {\n        \"swiftmailer\/swiftmailer\": \"^6.2\"\n    }\n}\nSo - this is telling Composer &quot;Hey, we need swiftmailer, and we want version 6.2&quot;.  Now, take a look at the References directory:\n\nSo if we only specified Swiftmailer, what's with all of these other directories?  Turns out, this is part of the power of Composer is when it installs a package, it automatically determines the different dependancies that the package needs to run.  Swiftmailer needs polyfill and email-validator and other pieces, so Composer grabs them for us.\nThe version can also be tweaked.  If you select &quot;swiftmailer\/swi"},"2019\/phpdoc-php7":{"title":"Using PHPDoc With PHP 7 - And Actually Making it Work","description":"Creating documentation that explains what each class, function, or variable does without having to read through the entire code","content":"Requirements\n\nPHP7\nIDE such as Visual Studio\/Visual Studio Code\nPHPTools\nPHPDocumentor2\n\nOverview\nIf you've been developing for any length longer than about 5 minutes, there's a good chance that someone has told you about the importance of properly documenting your code.  And like a good person who doesn't want to make babies cry, I know you want to make all of the comments in your code that it needs, so the world will understand your masterpiece.\n\n\n\n\n\n\n\n\nSeriously - why would you want to make this baby cry?  Document your code.  Please.\n\n\n\nBut commenting code isn't enough.  With PHPTools they can hover over function calls and see a synopsis of the function call. Like so:\n\nBut - it's a little annoying making people crawl all over your code to find the functions being used, and then go back to coding.  What if there was a tool that could take all of the documented comments in the code, collect them into HTML pages with links between the methods and detailed explanations of what each class, method, and variable does?  Could such a tool exist?\nWell.  Yes, it does.  It's called PHPDocumentor, or PHPDoc for short.\nPHPDocumentor - The Rundown\nPHPDocumentor - known as PHPDoc for short - has become the &quot;de facto&quot; documentation system for PHP.  It's really a PHP based program - using the concept of &quot;eat your own dog food&quot;* school of software development.\n\n* &quot;Eating your own dog food&quot; does not mean a bad thing.  It means using your own software to achieve your goals.  Developers should eat their own dog food when possible, so they have the same experiences as their users.\n\nWhat PHPDocumentor does is read through a directory of PHP code, looks for PHP files, and extracts comments with special formatting.  Here's a typical example:\n\/**\n * Displays an error message that can be processed by JSON accepting systems.\n * @param mixed $status Status of either success or failure.\n * @param mixed $message The message to be returned.\n *\/\nThese PHPDoc formatted comments are translated into HTML, creating documentation that explains what each class, function, or variable does without people having to read through the entire code. They can use the PHPDoc HTML pages to quickly see how the software works, what the functions use for variables, what the function returns, or other useful bits of information that the developer decided was important.\nPHPDoc does not generate comments and documentation for you -you still have to type in the details.  But it can collect those comments for you, and PHPTools makes it even easier.\nPHPDocumentor 2 - Installation\nPHPDocumentor can be installed either through PEAR, PHAR, or composer.  But - the default PHPDocumentor is geared for PHP5.  If you're running PHP7, you'll run into problems such as differences in how arrays work or other little issues if you use the standard PEAR method.  So, first rule - if you're going to use PHP7, don't install PHPDocumentor with PEAR.\nInstead, check out PHPDocumentor2 available at https:\/\/github.com\/phpDocumentor\/phpDocumentor2 - this is made to be PHP7 compliant.  There are some gotchas on how to set it up, so this is one that works well for UNIX and Mac based systems through this process:\n\nCopy the most recent PHAR and the public key files at https:\/\/github.com\/phpDocumentor\/phpDocumentor2\/releases.\nCopy these files to a directory that can be easily accessed from anywhere.  For Unix\/Mac systems, that can be \/usr\/local\/bin\/.\n\nOnce it's installed, you run it through the command php PATHTOFILE\/phpDocumentor.phar.  In the example above, that would be php \/usr\/local\/bin\/phpDocumentor.phar.\nDon't go running it right now if you don't have PHP files to document - you'll have a disappointing experience because nothing will happen.  If you want to use PHPDoc, first you'll have to create some PHPDoc documentation in your PHP files.\nOptional Additions\nPHPDoc can do most everything by itself, but if you want to have some pretty pictures to go with it, having https:\/"},"2019\/phptools-updates-july":{"title":"PHP Tools Updates (July 2019)","description":"New features are available to\u00a0PHP Tools -\u00a0for\u00a0both Visual Studio and Visual Studio Code!","content":"New features are available to\u00a0PHP Tools -\u00a0for\u00a0both Visual Studio and Visual Studio Code!\nImproved code analysis and\u00a0code completion, advanced metadata, and\u00a0if you like to use frameworks, or eager to try the new PHP 7.4, keep reading because we have great news for you!\nDownload PHP Tools for Visual Studio\nDownload PHP Tools for VS Code\nWhat's new from\u00a0PHP 7.4?\nPHP Tools has full support for PHP 7.4 now. Even though PHP 7.4 was released just like as an alpha version, the PHP Tools' editor supports the full range of the new PHP's flagship syntax, features, and deprecations.\nEven if you don't have the newest version of PHP yet, all the new constructs will be handled and reported and you'll still get full type analysis and\u00a0help from the editor.\nA\u00a0new feature of PHP 7.4 is the arrow function declaration - the simplified anonymous function declaration. You'll find\u00a0that the PHP Tools' editor supports PHPDoc above the arrow function, analyses types and warns you about the available features\u00a0if you're still using PHP 7.3 or older.\n\nAdditionally, there are underscore separators in numbers, typed properties, array spreading operator, ??= operator and new magic methods - __serialize() and __unserialize(). Try the new features and get warned when you misuse them - for example, did you know that you cannot use callable\u00a0as a property type?\n\u00a0\n\nIf you don't have PHP 7.4 yet, with PHP Tools you can choose to comfortably install it right from Visual Studio with a single click. Go to your project properties and click the version you want to use.\n\u00a0\nPhpStorm Advanced Metadata\nMany projects deal with dependency injection, containers, and factory methods. It's a common approach in PHP but very unfriendly to PHP editors. For that reason, projects usually have a &quot;special&quot; file or a set of files -\u00a0.phpstorm.meta.php - which contain additional metadata that helps the editor with type analysis and code validation.\n\nStarting with this update, PHP Tools supports the advanced metadata feature, as well as improving the overall experience, allowing future enhancements, and many other interesting features.\nMore Code Analysis\nThe code analysis has new features as well. The\u00a0analysis of numbers and conditions and\u00a0certain built-in PHP functions\u00a0have been improved. Newly magic methods are checked for their correct signature and you won't have to deal with unexpected runtime errors. Analysis of lambda functions has also been improved - it now supports PHPDoc anywhere above the function and its return type is resolved properly and as precisely as possible.\n\nThere are new diagnostics -\u00a0unpack operator and its operand, and checking for parameters duplicity. Also, the inspection of unused variables has been improved and now PHP Tools reports a few more deprecations that you shouldn't use in PHP 7.1, 7.2, 7.3 and 7.4 (specifically) anymore.\nImproved Code Completion\nSince the type analysis has been improved, the code completion gets better as well. You'll get better handling of PHPDoc above lambda functions and more. Also, a small improvement has been made to the completion after the\u00a0use keyword, so you can list the fully qualified names, including namespaces.\nOverall improvements have been made to support the Laravel and Oxid frameworks, primarily when using the advanced metadata file as described in the section above.\nClick to go to the definition\nLast, but not least, a neat feature - mouse click to go to the definition. This is getting popular in Visual Studio 2019 and Visual Studio Code, and now you can use it when working with your PHP code (older editions of Visual Studio do not support it).\nHappy coding!\nDownload PHP Tools for Visual Studio\nDownload PHP Tools for VS Code"},"2019\/php-forms-get-and-post":{"title":"PHP Basics:  Forms, GET, and POST","description":"How to request information from users and how to retrieve what they have written","content":"Requirements\n\nWeb Server with PHP enabled\nIDE like Visual Studio Code with PHP Tools\n\nOverview\nWeb pages, when they first appeared, were in a lovely, static state.  They displayed information to the reader, perhaps if you were lucky, there would be pictures (Woah!  Pictures!).  But sooner or later, someone had to mess it up and ask a simple question:\n\n\nHey, how do we get information out of the reader so we can store it in these big fancy computers running the Internet?\nIf we did that, we could even customize the web pages based on what they entered!  We can do really important and useful things with that!\nLike - allow people to edit cat videos to put in silly comments and share them with their friends?\nI was thinking more like &quot;cure cancer&quot; or &quot;create a time machine from a microwave that turns bananas into gelnanas&quot;, but we did invent the Internet just for cat videos, so let's go with that.  \n\nSo with that - retrieving information from web pages was born through the use of elements called &quot;forms.&quot;  Today, we shall explore the wonderful world of forms - how to request information from users, and then how to retrieve what they have written to put it to some use.\nNo, not for editing cat videos.  We'll leave that to another day.\nForms Basics\nThere are all sorts of forms, but let's cover the most simple ones.  Every form requires the same basic elements:\n\nDeclaration:  This is where we specify &quot;Hi - we're starting a form!&quot;\nAction:  Where will this information be going (usually another web page)\nMethod: How we're sending this information.  Usually there are two methods, or &quot;verbs&quot;:\n\nGET:  The information is part of the address field\nPOST:  The information is part of the body of the request\n\nInputs:  What information are we trying to get the user to do?  Click a button, enter their name, select from a group of choices\nSubmit:  Once we have the information, we need to do something with it.  Submitting it sends the data.\n\nHere's a simple sample form showing each of these elements:\n&lt;form action=\"getme.php\" method=\"get\"&gt;\n    &lt;br \/&gt;First Name: &lt;input type=\"text\" name=\"firstName\"&gt;\n    &lt;br \/&gt;Last Name: &lt;input type=\"text\" name=\"lastName\"&gt;\n    &lt;input type=\"submit\" value=\"Submit\"&gt;\n&lt;\/form&gt;\nPOST VS GET\nLet's take a moment to talk about POST and GET some more.  There are other HTTP &quot;verbs&quot; out there, such as PUT, DELETE, etc, but the most commonly used are POST and GET.\nGET puts the information into the address field.  Let's go back to our simple example:\n&lt;form action=\"getme.php\" method=\"get\"&gt;\n    &lt;br \/&gt;First Name: &lt;input type=\"text\" name=\"firstName\"&gt;\n    &lt;br \/&gt;Last Name: &lt;input type=\"text\" name=\"lastName\"&gt;\n    &lt;input type=\"submit\" value=\"Submit\"&gt;\n&lt;\/form&gt;\nWhen the user types in &quot;Carl&quot; and &quot;Weathers&quot; selects the &quot;Submit&quot; button, this is the address they are taken to:\nhttp:\/\/localhost:8000\/getme.php?firstName=Carl&amp;lastName=Weathers\nWith this, our clever web server script will easily be able to find the values for firstName and lastName.  They're right there in the address bar.  Even better - now we can bookmark that page and be able to return to it whenever we want to.\nSounds great, right?  Well, like everything in the universe, including duct tape, there is a light and dark side binding it together.  GET has some issues.  Mainly: it isn't secure.  For example, suppose that we have this:\n&lt;p&gt;Greetings, program!  Please enter your username and password!&lt;\/p&gt;\n&lt;form action=\"getme.php\" method=\"get\"&gt;\n    &lt;br \/&gt;Username: &lt;input type=\"text\" name=\"userName\"&gt;\n    &lt;br \/&gt;Password: &lt;input type=\"password\" name=\"password\"&gt;\n    &lt;input type=\"submit\" value=\"Submit\"&gt;\n&lt;\/form&gt;\nWhat we'd see on the web page is this:\n\nLook - the password is obscured, so it's totally secure!  And when we click &quot;Submit&quot;, what appears in our URL?\nhttp:\/\/"},"2019\/creating-a-php-api-for-logging-messages-calls":{"title":"Creating a PHP API for Logging Messages Calls","description":"A simple response system in PHP","content":"Requirements\n\nIDE such as Visual Studio Code and PHP Tools\nJquery\n\nTracking the Browser Without Refreshing\nNot long ago, I had a client who had an interesting problem. I had created a web site that let their clients upload images.  It had All-the-Things, such as:\n\nCreated a unique web page that lasted only 24 hours for each client.\nTracked the file uploads.\nReject files if they didn't match a certain type (aka - they had to be PDFs, jpgs, but not docx, xlsx, etc).\nProvided an administrative page to the internal users so they could track what files were uploaded from which client, reject or grant access, and other little cool bits.\n\nThe client came to me with new interesting request:  They wanted to track whenever a client tried to upload a rejected file, and do it without the client actually submitting the file to the server.  The problem was that the rejected or approval of each file was happening at the Javascript level.  This way the client didn't have to refresh the web page all the time.  They would receive instant validation or rejection of the file.  It was a pretty simple rejection - if the file didn't end with .jpg, .pdf, or png, the file was rejected.  \nSo how to take that error in JavaScript, and log it into the company's database?  I could build up an entire system based on connecting the JavaScript to the database, but that would mean possibly leaving the access credentials in the JavaScript code.  Which, from a security standpoint, is bad.\nThey already had a PHP based system that I had helped upgrade that connected back to a database.  So rather than recreate all of that in JavaScript and find ways to secure it, I created a simple response system in PHP that just did the following:\n\nAccept an error message from JavaScript (or any other language) that includes:\n\nThe error code.\nA description to go with it\n\nStore that error into a database.\n\nHere's a representation of how the system looked from a bird's eye view:\n\nI'm a simple man, and I wanted to keep the system as simple as possible.  In that spirit, this sample code will be extremely simple so you can use it wherever you like.  Simply.\n\nDevelopers, please note John's Law:  &quot;It's always something small and simple that gets you.&quot;  Meaning - &quot;When things don't work, it's because you forgot a comma.  Or to close a function.  It's never something complex and crazy - it's always something simple that messes up.\n\nStarting at the JavaScript Level\nLet's start where the messages are coming from so we have a good idea of what our messages will look like, and we can generate some sample messages.\nFirst, let's set up our sample file with Jquery.  It's going use AJAX to send out our message to our PHP server, which will process it and return a response.  Here's how to set up the code:\n\nFirst, go to Jquery and download a copy of the jQuery script.  Nearly any version will work, but for this I'll recommend the uncompressed development version.  As of this article, that's version 3.4.1.\nIn your development environment, place your jQuery script file into the directory js.\n\nCreate index.php and put in the following:\n&lt;html&gt;\n&lt;head&gt;\n&lt;script type=\"text\/javascript\" src=\".\/js\/jquery-3.4.1.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n\n&lt;p&gt;\n&lt;button onClick=\"LogStatus('My Error','This is a bad file you know.')\"&gt;Click to generate a log file.&lt;\/button&gt;\n&lt;\/p&gt;\n\n&lt;script&gt;\nfunction LogStatus(status, message)\n{\n\/\/Use this for error tracking if needed\n\/\/ console.log(\"The status code: \" + status);\n\/\/ console.log(\"The message: \" + message);\n\n\/\/The JavaScript the sends a message to the PHP file.\n$.ajax({\n  \/\/the payload being sent\n  data: {\n          'function': 'LogStatus', \n          'status': status,\n          'message': message\n      },\n    url: 'server\/StoreLog.php',\n  method: 'POST',\n  \/\/If logging the message is a success, display a message\n  success: function(message) { \n      let displayMessage = JSON.parse(message);\n      alert(displayMess"},"2019\/php-for-beginners-part-1-variables-functions-classes":{"title":"PHP For Beginners - Part 1: Variables, Functions, Classes","description":"Building up the most basic program in PHP","content":"Overview\nNot everyone was born a PHP expert.  And if you were born a PHP expert, then we really need to check in with some researchers who want to know just how that knowledge was embedded into your baby brain.\nPHP is one of those &quot;learn in minutes, master in a lifetime&quot; kind of things.  The language, the syntax, the concepts behind the PHP language aren't that difficult to grasp, but over the years there have been so many functions, plugins, libraries and frameworks that someone could spend a lifetime and not get to the end of what PHP can do for them.\nWe're going back to the basics, building up the most basic programs in PHP.  By the end, you'll be able to create a simple program that will impress your cat.\n\nDisclaimer:  Nothing will ever impress your cat.\n\nThe explanations here are at a very, very high level.  For more detailed information, I recommend reading through the entire documentation of PHP.  All of it.  Read every word.\n\nDisclaimer:  Don't read every word unless you really want to impress your cat.\n\nRequirements\nThere are plenty of ways to work in PHP, but we'll be using the following for our examples:\n\nDevelopment environment with PHP installed from whatever method you prefer\nVisual Studio Code or Visual Studio 2019\nPHP Tools\nXdebug\n\nFor the examples here, we'll be using Visual Studio Code with PHP Tools installed in it.  It'll help us build our basic program by autocompleting functions, looking up definitions so we're not flipping over to the PHP documentation page, and just generally makes life easier.\nPHP Coding Concepts\nScript Start and Stop\nLet's start with a very simple PHP script.  Open up your copy of Visual Studio Code, create a new file and let's call it &quot;lesson.php&quot;.  Put this in:\n&lt;?php \n?&gt;\nWhat - that's it?  That's right - nothing is inside.  This first item is just verifying that you set up Visual Studio Code, PHP, and PHP Tools properly.\nOn the left side of Visual Studio Code is a bug with a line through it - that means &quot;Debug&quot;.  Get used to that guy - we're going to be using it a lot.  Click it, and you'll see next to DEBUG a green arrow. \n\nNo.  Not that green arrow.\nIf this is your first time doing this, you can set up a debug configuration just by selecting No Configurations, then select Add Configuration.  If you set up PHP Tools, PHP, and Xdebug the right way and created our lesson.php file, then we'll get a nice configuration that will run a little web server and Xdebug for us.  Like so:\n\nNow - click on that green arrow!  Click away!\nDid nothing happen?  Well, good.  Because our program has nothing in it.  Every PHP script starts with the &lt;?php tag, and ends with ?&gt;.  This tells our PHP interpreter &quot;Everything between &lt;? php and ?&gt; is code to run.&quot;\nYou can even have multiple segments tied together, with other kinds of scripts or code inside, like HTML.  It's not uncommon to see something like this:\n&lt;?php\n$hello = \"Hello!\";\n?&gt;\n\n&lt;p&gt;\"I'm going to write out &lt;?php echo $hello; ?&gt;.\"&lt;\/p&gt;\nGo ahead and put that code into lesson and run it with the configuration Launch the Current Script in Console.  In the Debug Console, you'll see the output like this:\n\nIt's not always necessary to have the ?&gt; at the end of the script, but it's good practice to do so.\nIf this is your first exposure to PHP, the next question you may have &quot;Wait - what's with that $hello thing?  What is echo?&quot;  We're getting there.  But before we actually do some more coding, let's discuss the most important part of being a software developer that almost no one ever does:\nDocument your code.\nComments And Documentation\nComments, in my opinion, are the most important part of coding.  They tell your fellow humans &quot;This is how I did what I did.&quot;  Sure, other developers can read your code and figure it out, but if they can read what you, the original author, told them, it's easier on their human brains.\nFirst, here's how to leave a comment"},"2019\/how-to-setup-php-web-server":{"title":"How to set up a PHP web server environment - Step by step","description":"Set up a server with PHP that can connect to a Microsoft SQL database.","content":"Overview\nThere are plenty of instructions available on how to set up a LAMP, WAMP, or MAMP (Linux, Windows or Mac with Apache Web Server, MySQL\/MariaDB server, PHP).  But there are also organizations who live and breath the Microsoft based environment, using Windows Server, Microsoft Internet Information Server (IIS), Microsoft SQL - have we repeated the word Microsoft often enough?\nFor developers who are working in the Microsoft world and want to use PHP, setting up a development environment can actually be a more difficult task than setting up a WAMP through tools like Bitnami or Apache XAMPP. With those, it's one install program, and you're up and running. For a Microsoft based development desktop you can use PHP Tools for Visual Studio which will automatically install and setup most of the things for you (IIS Express, PHP, Xdebug). However if you don't have it, follow the instructions in this article step by step. \nWe'll run the steps for getting a development web server environment set up and running that can fit right into a Microsoft based shop, using PHP as the primary scripting language.  Please note that this will be a development environment for a desktop system running Windows 10.  The instructions will be similar for a Windows Server environment.\nOur sample environment will contain:\n\nMicrosoft IIS - either as a Windows Component or Express\nMicrosoft SQL Server Express\nPHP Version 7.2\n\nInstalling IIS\nThere are two ways of installing IIS on Windows 10 - as a Component Service, and as a separate program IIS Express.\nThe difference is how much control you want, and how easy to make life on yourself.\n\nIIS as a Component Service:\n\nEasy to configure through application Internet Information Services (IIS) Manager.\nRuns as a service so you need to turn it on\/off manually unless you set it to auto-run\nLarger storage space taken up on the hard drive\n\nIIS Express:\n\nVery lightweight\nOnly run as required - turn it on, turn it off, and you're done\nMore difficult to configure manually\n\n\nInstall IIS Via Component Services\nIf you want IIS to be a more or less permanent of your development system, then we can use Windows Component Services to install the service.\nHere's the steps:\n\nRun Control Panel, then select Program and Features, then Turn Windows Features On and Off.\n\n\nThe other way is just to hit the Windows button and search for &quot;Component Services&quot;.\n\nOpen up Internet Information Services.  Make sure the following has been checked:\n\nWeb Management Tools\nWorld Wide Web Services\n\nCGI\n\n\nSelect OK, and let Windows update itself.\n\nHow do you know you're up and running? If you go into your Windows Administrative Tools, you'll see Internet Information Services (IIS) Manager.  Launch it, and you'll have a view like this, and you can start\/stop your web server by selecting &quot;Manage Server&quot; on the right hand side:\n\nBy default, IIS installed through Component Services runs on port 80.\nInstalling IIS Express\n\nNote: If you have PHP Tools for Visual Studio, IIS Express will be automatically installed and configured for you.\n\nAs of this article, the most current version of IIS Express for Developers is is 10.0, available at https:\/\/www.microsoft.com\/en-us\/download\/details.aspx?id=48264.  This version has been optimized for developers.\nFrom the web page, select the version that matches your environment - they'll be separated by country code.  For example, developers in the United States should select iisexpress_amd64_en-US.msi:\n\nOnce it's downloaded, run the .msi file.  Of course, you'll need to be the administrator of your desktop environment.\n\nOf course, you're reading over the entire license agreement before you install any software?  Of course you do.\nAnd - that's it!  You're probably wondering - ok, how do I manage it?  Well, not through a fancy application like IIS Manager.  All of the configuration files are located under %WinDir%\\System32\\Inetsrv\\Config.  For all of the details, please see IIS Configuration Referen"},"2019\/php-tracepoint-logpoint":{"title":"Tracepoint, logpoint, what\u2019s the point?","description":"Keep track of your algorithm without modifying your code","content":"You are probably well acquainted with breakpoints. You place them in your IDE (F9) and whenever the program reaches this location in the source code during the execution, the program stops and you can explore the state of the application. Very useful, right?\nWhat if you don\u2019t want to stop the program from executing, and you\u2019d just prefer to log the message with the values you are interested in each time the execution goes through the location you want?\nQuite often you\u2019d just write echo $variable (or some kind of expression) and be done with it. In general, I wouldn\u2019t recommend it. Modifying the source code for the purpose of debugging -assuming you could even modify the code at all, e.g. you are on a production server- might actually alter the program behavior or you can forget to remove these log snippets when you are done debugging. Both scenarios are not desirable.\nInstead you could place a tracepoint in VS, or a logpoint in VS Code. They are named differently, but they are actually the same thing. They behave like breakpoints, but instead of breaking the execution of the program, the debugger outputs the log message to Output Pane (VS) or to Debug Console (VS Code).\nTo place them you have to:\n\n\nTracepoint \n\nin VS 2015 and up: place the breakpoint (F9), hover over the breakpoint sign and select the settings' symbol. Then fill the log message.\nIn VS 2013 an lower: place the breakpoint (F9), right click on the breakpoint (in the editor left margin), choose \u2018When Hit\u2026\u2019 and fill the log message\n\n\n\n\nLogpoint in VS Code: press F9, right click on the breakpoint, choose Edit Breakpoint, click Log Message and fill the message.\n\n\nThe syntax of the log message is similar in both VS and VS Code. The message is in plain text, but you can include expressions which will be evaluated within curly braces ({).\nIn the image bellow I have placed a logpoint to a factorial function. When the code executes, you can see the output of each recursive call of the function in the Debug Console. I've used simple expressions as direct variable use, but feel free to use any complex expression as you'd like, e.g. 1+1\n\nSo, next time you will be tempted to write echo $variable just to find out how the variable changes during the execution of the program, try placing a tracepoint or a logpoint instead! and let us know how it works!"},"related-articles-how-to-install-xdebug-for-php-tools-for-v":{"title":"How to set up a PHP based web server - Overview","description":"The most popular methods of setting up a web server powered by PHP","content":"Overview\nThe great thing about PHP is how ubiquitous it is - there\u2019s a version for nearly every operating system or flavor of Unix out there.  Even if it\u2019s not available on that platform by default, PHP\u2019s Open Source license allows ambitious developers to port it to their platform of choice.  \nWhen a developer is looking to set up their own web server with PHP development environment, the following considerations should be taken into account:\n\nOperating System:  There are different options for installing a PHP based web server depending on what operating system is being used.  For example, users running Linux will have the option of using PHP with the web server Apache or Nginx, while Windows users might want to use Microsoft IIS.\nLevel of Control:  It\u2019s easy to just get started with a package installer, like Bitnami or XAMPP, which installs the most common systems (such as a web server, a version of PHP, and a database server like MySQL or MariaDB).  Other users might want more particular control, and install the various components themselves so they know exactly what version they're using.\nComponents:  Just what do you need to get things done?  Maybe you\u2019re just wanting to use PHP and don\u2019t need data storage, so there\u2019s no need to install a database.  Maybe your company uses Microsoft SQL Server or a \u201cSQL-less\u201d database like MongoDB.  \n\nWe\u2019ll provide detailed instructions on how to set up a web server with PHP with each of these PHP environments in other articles, but let\u2019s start with a list of some of the different methods for installation and the most popular options.\nCommon PHP Stacks\nPHP is rarely installed in isolation from other components.  It\u2019s like a good team - you need a group of people who are good at their particular skill set.  Over time people have gravitated to their particular favorites when it comes to how to set up a web server, how to develop interactive programs, how to store data and other needs.  \nPHP is typically run as part of a \u201cstack\u201d - a \u201cstack\u201d refers to the environment that provides HTTP, database, PHP, and related components as one complete package.  Most stacks are composed of:\n\nThe operating system\nThe web server\nThe database server\nThe scripting language (in this case, PHP)\n\nThese days, most of the development tools can work on whatever desktop operating system of choice.  Visual Studio Code runs the same whether you\u2019re on Mac, Windows or your favorite flavor of Linux, and extensions like PHP Tools run on all of them.  Visual Studio has versions for platforms other than Windows, though the Windows version is still the most robust.  This leaves the question as to what PHP based stack up to the needs of the business and the individual developer.\nLAMP and WAMP and MAMP - Oh My!\n\nThe most common way of using PHP is with a web server and a database server.  By far, the most common environment is running PHP with the Apache web server and the MySQL (or the Open Source community variant, MariaDB).  \nApache and MySQL\/MariaDB are popular for a few simple reasons:\n\nCost:  Both are \u201cfree as in cost\u201d, maintained by communities or organizations with a financial incentive to keeping these systems updated and improved.\nOpen:  Both are \u201cfree as in information\u201d, which means that any user can download not just the programs, but can see the source code of how they were built to make custom improvements of their own.\n\nThe difference between the various ?AMP environments comes down to the operating systems.\nLAMP (Linux Based)\nThe most popular of the ?AMP varieties is LAMP.  While the L stands for Linux, it can also stand in for nearly any Unix based or Unix like operating system.  These operating systems comprise over 65% of all operating systems used by servers on the Internet, according to reports from W3Techs.\nThe popularity of LAMP is based on the same features that makes Apache and MySQL popular:  free as in cost, and free as in information. The Linux based systems are also incredibly versatile - users can"},"what-does-php-tools-add-to-your-ide":{"title":"What does PHP Tools add to your IDE?","description":"PHP Tools installed versus vanilla IDE","content":"Overview\nDevelopers have moved on from the early days when all of their coding was done through vi terminals with just basic text editors.  PHP Tools saves developers time and increases accuracy, which makes for better programs.\nPHP Tools can be integrated both into both Microsoft Visual Studio Code and Microsoft Visual Studio, but what does a development environment look like with PHP Tools installed versus the vanilla development studios?\nVisual Studio Code\nPHP Tools makes developing on PHP even faster.  We\u2019ll be testing out Visual Studio Code running on OS X Mojave with PHP 7.2 installed, with Xdebug installed as well.\nWhat we want to do is show how a development is like on a vanilla Visual Studio Code setup, versus one that has PHP Tools installed for some of the major developer enhancements:\n\nCode Completion\nCode Definition\/Peek\/References\nCode Refactor\nDebugging\n\n\nNote: PHP Tools extends Visual Studio Code with many more features than the above mentioned.\n\nCode Completion\nCode completion is the first tool most developers use to quickly add in standard built-in functions into their software. From the moment a user starts entering in text, PHP Tools can match it against standard PHP functions, show the required parameters, and a quick definition of what the function does.  For example, typing in random_int displays:\n\nHere\u2019s what it looks like on a side by side comparison between using PHP Tools to make a simple script with two files:\n\nfunctions.php - contains the functions used by the entire script.\nindex.php - the starting program\n\nWith PHP Tools\n\nWithout PHP Tools\n\nIn the second example, notice that the developer has to move back and forth between the code editor, back to a browser to look up the functions they\u2019ll be using.  Code completion that includes these PHP functions saves developers time looking up what code to use, and gets them into just using it.\nCode Help\nThose who looked closely may have noticed coding errors within the program.  Here\u2019s how it looks in vanilla Visual Studio Code:\nfunction RollDice($diceSize)\n{\n    srand();\n\n    $returnValue = 0;\n\n    if($dizesize &gt; 0)\n    {\n            returnValue = random_int(1, $diceSize);\n    }\n\n    return $returnValue;\n}\nNotice that $dizeSize has two different capitalizations?  Standard Visual Studio code didn\u2019t notice that, but PHP Tools did, and informs us that $returnValue isn\u2019t properly formatted:\n\nAs you may know, problems in a program are cheapest and easiest to solve when they\u2019re found in the code before it\u2019s deployed.  \nCode Definition\/Peek\/References\nWhen programs span multiple files or contain a lot of code, the ability to peek a function can save a lot of time rather than jumping back and forth between different files or windows.  With PHP Tools, right click on a function call or class method, and take a look at what the standard or custom function does.\nThis time we\u2019ll swap back and forth between two different Visual Code views - one with PHP Tools enabled, the other without and show how to:\nPeek: Show without the current display the function being used\nGo To Definition:  Head directly to the function call to make edits or see how it works\nFind All References:  See how any place the function, variable, or similar is used anywhere in the program.\n\nWithout this ability, tracking down where code is being used would rely on Visual Studio Code\u2019s search multiple files feature, which can work but lacks the elegance of finding by reference.\nCode Refactor\nCode Refactor replaces a variable or function name everywhere it is used through the program.  This goes beyond just search and replace - this process automatically looks through included files to update them when a name change is necessary.  If you\u2019ve ever had a developer who misspelled a variable, Code Refactor can get it correct faster:\nWith PHP Tools\n\nWithout PHP Tools\n\nDebugging\nEvery developer reaches a point when they\u2019ve cleared out all of the syntax or naming errors in their code, and it\u2019s all just to logi"},"php-tools-at-a-glance":{"title":"PHP Tools at a glance","description":"Learn the key points of the software","content":"What is PHP Tools?\nPHP Tools is an extension created to help PHP software developers write, analyze, test and debug the source code.\nIt also alllows to write code in multiple languages, such as HTML, CSS or JavaScript, it supports PHP frameworks and allows the use of other plug-ins, all under the high standards of the Microsoft Industry.\nSee the Overview video.\nOverview of PHP Tools benefits\nPHP Tools is an extension for Visual Studio and for VS Code IDEs designed for experienced developers looking to build professional platforms and any type of PHP application. The solution is based on productivity, fast implementation, and easiness of use.\nPHP Tools is built on C# which is a huge advantage to PHP developers. C# allows the application to perform visibly faster than other similar solutions. Developers can easily enforce their specific coding styles, rules, and PSR standards for each project.\nA noteworthy feature is IntelliSense, which provides smart, context-aware code completion, detailed tool tips and function parameter assistance. Also, it contains a complete PHP manual, learns from your code and performs type analysis. It's useful to minimize the amount of key strokes you have to do.\n\nAnother exceptional feature is the seamless refactoring functionality. You will avoid typos and keep your code clean by using it. You can easily refactor your entire PHP namespace with a few clicks. Refactoring can rename identifiers in place or with a detailed preview where you can uncheck single occurrences.\nPHP Tools integrates with Xdebug and works great with all kinds of web servers, allowing you to debug your program quickly and intuitively. The app is a reliable, fast and smart coding assistant that includes all the features you need, and more in the best-in-class IDE. \n\nMain features\n\nSyntax highlighting\nCode validation\nIntellisense\nNavigation\nRefactoring\nCode formatting\nTesting\nDebugging\nMany others\n\nWhat does PHP Tools add to my IDE?\nFree trial\nWe offer PHP Tools for two IDEs - Visual Studio and VS Code. Both products come with a free trial to evaluate the software and see if it adapts to your needs before you acquire it.\n\nPHP Tools for Visual Studio comes with a 30-day trial \nPHP Tools for VS Code contains a 14-day trial\n\nImportant:\nYou have to have one of these two IDEs before installing PHP Tools. It could be either: \n\n\nVisual Studio (Download the free Community version); or\n\n\nVisual Studio Code (Download VS Code)\n\n\nAnd then, download and install PHP Tools in a few clicks.  When the trial is over, you can activate the software using a purchased license key. \nHow much does PHP Tools cost?\n.\nPersonal License - For individual customers\nIndividuals can choose the platform on which they will use PHP Tools, either Visual Studio, VS Code or both.\n\n\n\nPlatform\nVisual Studio\nVS Code\nBoth Platforms\n\n\n\n\nNew License\n$79\n$59\n$119\n\n\nRenewal\n$49\n$49\n$69\n\n\n\n.\nCommercial License -  For  organizations\nCommercial licenses can be used on both platforms (Visual Studio and VS Code), and organizations just have to check the number of developers that will be using the software.\n\n\n\nNumber of users\nSingle user\nTeam (5 users)\nEnterprise (5+)\n\n\n\n\nNew License\n$179\n$630\nContact info@devsense.com\n\n\nRenewal\n$98\n$490\nContact info@devsense.com\n\n\n\n\nWe provide quotes for business and resellers. For more information, please contact us at info@devsense.com.\n\nTechnical details\n\nLanguage support\nEnglish, Spanish, German and others (fr, ja, pt-br, ro, ru, tr, zh)\nPricing model\nPermanent and annual subscription. Please see License overview.\nCustomer types\nPHP Tools is offered to freelancers, small and medium business, but also large enterprises.\nSupport\nPHP Tools is 100% supported. If you find any issues or have any doubts or concerns, you can:\n\n\nSend feedback directly from the tool;\n\n\nAsk questions in our Community Forum; or\n\n\nContact us at  info@devsense.com. We speak English, Spanish, Czech and Slovak.\n\n\nRelated links\n\nInstallation instructions\nProduct activation\nDebug"},"8-tips-a-new-php-developer-should-know":{"title":"8 Tips a new PHP developer should know","description":"Tips for beginners in the PHP world","content":"PHP is highly popular- it has become almost impossible for all web developers not to have at least a working knowledge of PHP. This article is aimed to help those who are beginning with PHP, but are willing to make extra efforts to excel in the field.\n1) Consult the PHP manual if you\u2019re learning (but if you\u2019re not, do it too!)\n\nIt might sound obvious, but there are many developers that don\u2019t do this. For the newer developers, each PHP function is documented, most of the time with examples and contributed notes from other developers, which will make learning PHP much easier.\nFor more advanced developers, consulting the PHP manual will help, too. Over the course of its 20-year history, PHP has evolved to become a very sophisticated language and after learning the basics, some PHP developers enter a false sense of comfort, resulting in their projects not working properly and leaving themselves vulnerable to hours of PHP debugging due to some of the nuances of the language. \nSo, it doesn\u2019t matter if you\u2019re a beginner or an advanced PHP developer, you need to familiarize yourself with subtleties of PHP to ensure that the code you produce is functional, understandable and maintainable.\n2) Use an IDE specialized for PHP (the correct development tools for PHP)\n\nAll developers want to be more productive, make fewer mistakes and write better code. And, of course, that all depends on the developer and their level of experience, but in many cases an integrated development environment (IDE) for PHP can help any developer achieve those goals faster. A good IDE can save a lot of time, help you fix bugs and even teach you a thing or two.\nChoosing the right IDE is not a simple task because a lot needs to be considered, but you can take a look at the core factors.\n3) Download Composer\n\nComposer is a tool for managing the libraries you need on your project. It will simplify the inclusion, installation and update of third-party code or projects for you. Everything will be already configured, so, you don\u2019t have to include any files, just call them and PHP will take care of the rest.\nPHP Tools installs Composer for you, but, if you don\u00b4t have PHP Tools yet, another option is shown in this tutorial to Install and Use Composer for PHP\n4) Store code snippets - keep them handy\nCode snippets are small blocks of code that can be used and re-used any time you need them. They save a lot of typing time, because you just insert and adapt them to your needs.\nFor Microsoft Visual Studio users, you will find them available under Tools | Code Snippets Manager. You can also create and save your own code snippets. If you\u2019re a Visual Studio Code user, you can download them from the marketplace or define your own under File | Preferences.\n5) Comment only complicated parts of your code\nThis is a controversial topic. Some developers think that commenting the code is important for future reference to know what\u2019s going on, what does the code do and why. While some others think that the code should be self-explanatory, that you don\u2019t need to write a lot of comments when you can just read the code and understand it.\nThe truth is that commenting your code is essential. Comments should describe the purpose of the code, so that future users (including yourself) can easily understand it. But keep in mind that over-commenting your code can be detrimental, redundant, \u201cnoisy\u201d and visually harder to read by anyone \u2013 so forget about writing a comment for every line of code and start writing clarification comments, instead.\n6) Add white space and format your code\n\nNobody likes to read a code that doesn\u2019t have structure, it\u2019s intertwined and very difficult to follow- the dreadful \u201cspaghetti code\u201d. There\u2019s also \u201clasagna code\u201d- the one that has way too many layers, for example, a lot of small classes. Or we can find \u201cravioli code\u201d, structured as small packages; or even \u201cmacaroni code\u201d, with a mixture of different computer languages. All of these code structures (or lack of) are diffic"},"commenting-your-php-code":{"title":"Commenting your PHP code","description":"Should you write comments in your PHP code or not?","content":"When I started to learn PHP years ago, I came across comments. What a controversial subject! Some programmers tend to comment their code, some don\u2019t. Looking for answers, I went to the Internet to find a never-ending discussion on the topic: \n\n\u201cNobody has time for comments!\u201d \n\u201cYou should write comments for every section.\u201d \n\u201cGood code speaks for itself.\u201d \n\u201cComments are good, but since nobody is reading my code, I don't write them\u201d. \n\u201cYou don't need comments when you name things well\u201d \n\nI even read a few stories about developers that had to read code written by somebody that commented every single line of the code. It was a nightmare. Being new to the PHP world, I began wondering: is commenting your code good or bad? Where should I write a comment? How much should I comment my code? Should I not comment it at all? I'm going to try and give answers to some of these questions in this article.\n\nWhat is the purpose of comments in programming?\nComments are descriptions of what is written in the source code. Their purpose is to clarify the code whenever it's uncommon or not intuitive. They are written in human language, so that anybody can read them and have an idea of what the program does. \nBesides clarifying the code, comments can be used to generate reference documentation -certain engines, such as phpDocumentor, pick them up and generate documentation directly from the PHP source code. This is helpful to provide information about the functionality of your code to your users. Most modern IDEs provide built-in support for writing and maintaining these comments. Generating documentation is not the aim of this article, but you can read more about it hereUsing PHPDoc with PHP 7. \n\n\nNicely documented declarations will help your future self and other developers consuming your API. It also specifies clearly what your function does.\n\n\nGoing back to our controversial topic, developers in favor of commenting the code state that comments are essential, that it's the only way to let future readers know what's going on in the code, what it does and why. If somebody else is going to read you code, it might not be obvious why you went down certain path or what certain function does.\n\nBut not all developers believe comments are useful. There are developers firmly against commenting the code. They believe that if you need comments, you must be doing something wrong. Comments hide the failures of a programmer. Also, comments are a waste of time because any comment that you write today can be obsolete tomorrow. Comments need to be updated with the code and nobody wants to do it, nobody has the time to do it. According to them, the good practice is writing \u201cclean code\u201d or \u201cself-documented code\u201d, that is, naming variables, methods and functions well.\nHere's are some of the reasons in favor and against comments:\n\n\n\nReasons for commenting the code\nReasons for NOT commenting the code\n\n\n\n\n- Explain the logic behind the solution -why certain function was used instead of another one. Very useful for a group of programmers.\n- Comments are redundant to the code. They explain the obvious, so they're useless.\n\n\n- Sometimes it's faster to read the comments that the code itself. If the code is unusual or complex, you could spend hours trying to figure out what's going on.\n- Comments are a sign of failure. If it's not obvious what the code does, it's wrong and you have to refactor it to make it self-explanatory.\n\n\n- Notifications, reminders, warnings and to-dos can be written in comments for yourself or the next developer.\n- They get outdated and are unreliable. Since the code gets updated frequently and usually comments don't, they're not relevant nor accurate most of the time.\n\n\n- If you revisit the code after some time (could be weeks or years), you won't know what it does, unless you have comments.\n- They're a waste of time. If you have to maintain the code and maintain the comments as well, you're wasting valuable time.\n\n\n\n\nAre comments a personal choice?\nIt"},"how-to-setup-migrations-in-laravel":{"title":"How to setup Migrations in Laravel","description":"Keep a record of your database changes over time","content":"Migrations work as a version control for databases. If you want to keep a record of your database creation and alterations over time, you can use migrations and simplify application re-deployment or distribution. Migrations will help you interact with your database by only using the CLI interface of Laravel. This means that after you install your application and configure the database connection, you just have to run \u201cphp artisan migrate\u201d and it will instantly set up the database again.\nPrerequisites\nFor migrations, you need to have the following installed:\n\nVisual Studio Code \nComposer (see how to install both VS Code and Composer here)\nA Web Development Environment. For this article, we\u2019re going to use WampServer to manage databases.\nThere are no particular configurations for WampServer, it will be downloaded and installed quite easily. Just follow the instructions given by the software or check this video.\n\n1) Use Composer to make a Laravel application\n\nRun the following command: \n\ncomposer create-project laravel\/laravel TestingMigrations\n2) Open your application directory in VS Code\n\nOpen VS Code. Click File |Open folder. A pop up window will appear on the screen.\nOpen your downloaded app (wherever you downloaded it). Your app will be loaded into VS Code. \n\n3) Set the .env file.\n\nOpen it and change the following items there\n\n\n\n4) Start WampServer\n\nOpen Wampserver\n\n\n\nWait until the icon in the task bar turns green\n\n\n5) Open your browser\n\nType in \u201clocalhost\u201d in your url to open WampServer\u2019s localhost, where your local databases will be embedded.\n\n\n6) Go to phpMyAdmin\n\nThe default user and password will be \u201croot\u201d and empty, respectively.\n\nFinally, after this, you\u2019ll be able to see your Database Management System, where you can alter your databases already present or you\u2019ll be able to see the tables created in the Laravel application. \nNow we\u2019ll make a sample database for future use:\n\n\n7) Open VS Code terminal\n\nOpen the VS Code terminal by pressing CTRL + Shift + `  or by clicking the Terminal option in the Menu bar and selecting the first option\n\n*Execute the following command in the terminal: \nphp artisan make:migration create_users_table\nIf it gives you an error, delete the old migration and make this new one.\nYour new migrations will be created in the migration sub-directory of database directory of your application. It includes two functions:\nUp function (responsible for making tables)\nDown function (responsible for dropping tables)\n\n8) Add code to the migration\n\n\nAdd the following code in the up and down function of the created migration\n\n\n\nGo the localhost and check if you can see your table.\n\n\n\n\nA few useful commands\nMigrations commands along with their uses:\n\n\n\nMigration command\nUse\n\n\n\n\nPhp artisan make:migration\nMake migrations in your app\n\n\nPhp artisan migrate\nRun your migrations\n\n\nPhp artisan migrate --force\nForce running your migrations\n\n\nPhp artisan migrate:rollback\nRollback migrations\n\n\nPhp artisan migrate:rollback --step=6\nRollback last 6 migrations\n\n\n\nAdditional reading\nIf you want to keep on reading about Migrations in Laravel, you can try:\n\nArtisan and Laravel Migrations\nDatabase: Migrations - Laravel\n"},"2019\/how-to-install-phptools-for-vscode-on-windows":{"title":"How to install PHP Tools for Visual Studio Code on Windows","description":"How to install PHP Tools for Visual Studio Code on Windows","content":"In this article, you will find out how to install PHP Tools for VS Code on Windows. Getting it running is fast and simple and it shouldn\u2019t take you more than a few minutes. \nInstall Visual Studio Code for Windows.\nTo install PHP Tools, you need to have Visual Studio Code (VS Code) already installed on Windows. For those who already have it, just skip this step. For those who don\u2019t, download VS Code for Windows. If you would like detailed instructions, click here.\n\nOnce you have VS Code installed, you have different ways of installing PHP Tools. In this article, we\u2019ll discuss two ways: The internal installation directly from VS Code, and the external from Devsense\u2019s download page. Both ways are simple, fast and easy. \nInternal Installation\n\n\nLaunch VS Code. \n\n\nClick the icon for extensions. \n\n\n\n\n\nSearch for \u201cPHP Tools\u201d in the search menu. \n\n\nClick Install. The tool should be installed automatically. \n\n\nAfter the successful installation, a pop-up window will appear on the bottom right of the screen. \n\n\nThere, you\u2019ll have to choose among entering your license key, choosing to get a trial or receiving more information. Please, refer to the Activation section of this tutorial for detailed instructions. \n\nExternal Installation\n\nGo to Devsense\u2019s download page. \n\nMake sure you have selected the section for VS Code on the right (the letters should be blue). \n\nDownload Extension\n\nClick the blue button \u201cGet the extension\u201d under the version you would like to download. \n\n\nThe file will start downloading to your PC. \n\n\n\n\nOpen VS Code \n\n\nInstall from VSIX\n\n\nOpen the command palette on VS Code (Ctrl + Shift + P) and type in \u201cInstall from VSIX\u201d. Next, click Install. \n\nActivation\nAfter successfully installing PHP Tools for VS Code, you\u2019ll receive a notification on the bottom right to activate it. Please, bear in mind that the activation of the software requires an Internet connection. You\u2019ll see three buttons: \na. \u201cI have the license key\u201d \nIf you already purchased your license key, click that button and fill in the required information. \nb. \u201cGet a trial\u201d\nIf you would like to try PHP Tools for VS Code, click this button: \n\nFill in the information and you\u2019ll receive an email with a 14-day trial key. Copy and paste the key and you\u2019ll be able to start using the tool. If you think PHP Tools for VS is the right option for you, you can purchase a license after the trial period is over. \nc. \u201cMore information\u201d \nThis button will take you to the purchase page, where you\u2019ll see prices and license information. \nThe activation will be confirmed by a pop-up window stating that the process was successful. \nDebugger and configuration\nOnce you have activated your PHP Tools, you need to setup PHP Tools\u2019 debugger. PHP Tools makes use of Xdebug to integrate debugging features into VS Code. \n\nMake sure you have PHP installed.\n\nPHP Tools plugin doesn\u2019t require you to have a web server! Only PHP. There are two options to install PHP on your platform. \n\n\na. You can go to php.net and download the installer of the latest PHP by yourself (preferred).\n\n\nb. You can download the whole web server package for PHP \u2013 Xampp or Wamp. \n\n\n\nGet your phpinfo(). \n\n\na. On the command line, run\n\nphp-r phpinfo(); \n\nb. If you installed Xampp or Wamp, just open http:\/\/localhost on your browser, and click on the phpinfo() tab. \n\n\nUse Xdebug Wizard\n\nCopy the whole content of phpinfo() that shows up and go to the Xdebug Wizard.  Insert the copied content there and click on the highlighted button below. \n\n\nThen, follow the steps provided. \n\n\n\nCheck php.ini\n\nWhen you\u2019re done with the above-mentioned steps, the last thing to do is ensure\u202fphp.ini\u202fstates the following directives: \nxdebug.remote_enable = 1 xdebug.remote_autostart = 1 \/\/ or append `XDEBUG_SESSION_START=1` parameter to the URL of page you want to debug \nNow you are ready to start your first project! \nGetting started with PHP Tools for VS Code\nYou may also want to read:\n\n\nConfiguration options\n\n\nHow to install Laravel for VS Code\n\n\nHow"},"2019\/factors-to-consider-when-choosing-your-php-development-tool":{"title":"6 core factors to consider when choosing a PHP developing tool","description":"6 factors to consider when choosing a PHP developing tool","content":"Choosing the right developing tool for PHP could be key to your software development. Just think about it- you will be investing a huge amount of time inside it. A useful IDE (integrated development environment) can help you speed up your PHP programming and be more productive. It means less typing and potentially learning something, if you\u2019re new to programming.\nHowever, an IDE that is slow and or one that doesn\u2019t handle the issues you need will kill your productivity. Anything that slows you down will quickly become a larger problem over time. That\u2019s why developers should consider different factors when deciding which is the most convenient tool for their development. In this article, we list 6 core factors to help you choose your development tool for PHP.\n1) Features\n\nOne of the most important factors when deciding what\u2019s the correct tool for PHP is its features. Most IDEs will offer syntax highlighting, spell-checking and auto-completion. Check what other features it has to offer and how they will adapt to your needs and to the overall completion of the project. Does it provide navigation and code refactoring? Does it include a debugger? These features could be crucial to your development.\n2) Speed\n\nIsn\u2019t it frustrating when you type something and the software takes forever to respond? Well, now imagine this over and over, all day long, every day. Any time that you could have saved with the tool, now it\u2019s gone because of a slow-responsive IDE. That\u2019s why you need your IDE to be fast. It will not only increase your productivity, it will really save you time, and even consume less battery!\n3) Easiness to use\n\nAny software has its own learning curve, to one degree or to another. However, complex tools require more effort and time to be used efficiently. And who wants to spend more time learning about the IDE, reading its documention, or asking for help, than actually working on it? So, easiness to use must be also taken into account when choosing your PHP developing tool. You should be able to know the capabilities and learn to use your IDE fast and efficiently. That involves becoming familiar with the key-shortcuts or the most commonly used commands. The easier that it is for you to know the capabilities, the faster you will start to improve your productivity.\n4)   Compatibility with your environment\n\nMake sure that the tool you choose works for your environment. Not all IDEs that work for Windows will for for macOS or for Linux. Basic stuff, but you\u2019ll be amazed by the amount of people that forget to check this beforehand. \n5) Support\n\nAnother essential factor when choosing your IDE for PHP. Fixing bugs, improving already existing functionalities, removing useless or unwanted features, improving software performance- you name it! Support is vital. You need your PHP IDE to be constantly checked and updated with the latest technologies for it to run seamlessly and with high-end efficiency. \n6) Integration capability\n\nThis means just how well the IDE integrates other tools \u2013 the more tools you can integrate seamlessly, the more productive you\u2019ll be. The IDE you choose must be able to suppport major frameworks for PHP, and it not only needs to integrate other tools with features not already covered, but also allow easy access to them. It's essencial that the integration is seamless, because nobody wants to leave their IDE to perform other tasks outside!\nConclusion\nSelecting a developing tool for PHP can be a critical step for your project. These are just some of the most important factors that should be taken into account when evaluating the overall value of the tool.\nSince there are plenty of options and a variety of different IDEs available, you should always try them and see if they adapt to your specific needs.\nRelated articles\nAdvanced debugging tips\nHow to set up a Windows subsystem for Linux for a PHP development\nCommenting your PHP Code"},"2019\/how-to-install-xdebug-for-phptools-for-vscode-on-mac":{"title":"How to install Xdebug for PHP Tools for Visual Studio Code on Mac OS","description":"How to install Xdebug for PHP Tools for Visual Studio Code on Mac OS","content":"Xdebug is an extension used for debugging PHP. One of the most popular IDEs, Visual Studio Code, can also benefit from Xdebug with PHP Tools. There are several ways to install Xdebug, but the most secure one is to compile the source code which is compatible with the specifications of your computer.  \nIn this article, you will find out how to compile the source code to install Xdebug for &quot;PHP Tools for VS Code&quot; on macOS. We\u2019ll assume that you have already installed PHP Tools for your macOS, but if you haven\u2019t, you\u2019ll find a tutorial right here.\n1) Download the source file\nXdebug  can be found on its webpage and it\u2019s also hosted on Github. The source code can be downloaded from both locations. For this tutorial, we have downloaded it directly from the Xdebug page here.\n\nAs explained on their website, Xdebug extensions are released for the PHP versions at the time, so there are releases of Xdebug as PHP versions there are. Some of these versions may not be compatible with your software. To be sure which file you need to download, you can use Xdebug\u2019s Wizard. \n\n\nFirst, get your php information. Open a command prompt, and then write: \n$ php \u2013i\n\n\n\nWhen your php information is displayed, select it all by pressing Cmd+A and then Cmd+C to copy it.\n\n\n\nThen, open the wizard here. On the white input box, paste the php information and press the analyse my phpinfo () output button. \n\n\n\nThe wizard will display the recommended file to download and also some additional instructions.\n\n\n\nClick on the download link on number 1 and save the source file. \n\n\n2) Unpack the downloaded source file\nThe source file will be downloaded with the extension tgz or tar. Before the installation, you need to unpack it or uncompress it\/untar it. For unpacking, you can either use any application like Unarchiver\u202for just use the command prompt.  \nTo unpack the tar\/tgz file by using the command prompt, first, change the directory where you downloaded the file. By default, it\u2019s downloaded to the \u201cDownloads\u201d folder. So, change the folder to \u201cDownloads\u201d. \n\nWrite the following command to untar the file. Be sure that the filename is exactly the same as the downloaded file. \n$ tar -xzf xdebug-2.6.1.tgz \n\nThis command will unpack the source file to a folder with the same name. \n3) Prepare the environment\nBefore building the Xdebug extension, you need to setup the environment and\u202fphpize is used for this. You can read more about phpize here and here. Now, follow these steps: \n\n\nFirst, change the directory to the folder which has just being unpacked from the source file. Then, run this in the command prompt: \n$ cd xdebug-x.x.xxxx \n\n\n\nThen, write: \n$ phpize \n\nIf phpize is not in your path, you should use \/path\/to\/phpize. \n\nIf the phpize command works as expected, the result\u2019s page must look like the picture below:\n\nIf there is an autoconf error, you can install autoconf with Homebrew and then export it. \n$ \/usr\/bin\/ruby -e \"$(curl \u2013fsSL https:\/\/raw.githubusercontent.com\/Homebrew\/install\/master\/install)\" \n$ brew install autoconf \n$ export PHP_AUTOCONF=\/usr\/local\/bin\/autoconf \nIn case of any missing x-code command line tools, run the following to install: \n$ xcode-select --install \n\n\n4) Configure the build\nTo configure the system for Xdebug, you need to get the build ready. Write in the command prompt: \n$ .\/configure \u2014-enable-xdebug \n\nIn case of errors in parameters, just use the command, .\/configure: \n$ .\/configure \n\nAnd if .\/configure is not in your path, write:\n$ .\/configure --enable-xdebug --with-php-config=\/path\/to\/php-config\n\n5) \u201cMake\u201d the build\nNow, it\u2019s time to finish the compilation of the source file. To build the software, just write: \n$ make \n\nIf you see the sentence \u201cBuild complete\u201d in the command prompt, it means that the compiled file \u201cxdebug.so\u201d has been created in the \u201cmodules\u201d directory. \n\n6) Copy the compiled file\nNow that the software is built and ready to run, the compiled file can be copied to its final destination. The make install command will co"},"2019\/how-to-install-laravel-for-visual-studio-code":{"title":"How to install Laravel for Visual Studio Code","description":"How to install Laravel for Visual Studio Code","content":"Laravel is a well-respected and popular PHP framework. As you might have read before, it aims to facilitate many of the common tasks of the majority of projects, while also strengthening security and database migration. That\u2019s why many developers are convinced that Laravel provides one of the most reliable and efficient approaches to building a website. In this tutorial, you will learn how to install Laravel for Visual Studio Code from scratch. \n\nUpdate: You can check Visual Studio tutorial here since lot of work mentioned in this article is done for you.\n\nInstallation\n1) Install Visual Studio Code.\nYou can download Visual Studio Code (VS Code) directly from its download page. For a detailed setup guide, click here. If you have it already installed, you can just ignore this step. If your using Visual Studio (instead of VS Code), PHP Tools will do this step for you. \n2) Install Composer\nBefore you install Laravel, you need to get Composer. Composer is a tool that helps with dependency management in PHP. It allows installing and updating different components for the framework, and it manages all libraries and dependencies in one place. So, in order to work on Laravel, it is necessary to have Composer already on your system. You can download it from this page: https:\/\/getcomposer.org\/download\/\n\nYou can check whether Composer was installed by typing the word \u201ccomposer\u201d on the command prompt. You should see something like this: \n\n3) Create a directory for your project.\nNow, you need to create a directory for your new Laravel project. This step might take some time, depending on the speed of your internet. You can create a directory anywhere in your system and then use the command prompt to go to that directory with the following command: \ncomposer create-project laravel\/laravel ProjectName \n\n4) Start Laravel\nLaravel comes with Artisan. Artisan is a command-line interface (CLI) and one of the most important components of Laravel. When you downloaded the framework from the server on step 3, Laravel\u2019s Artisan CLI was installed automatically. You don\u2019t need to install it separately.\nArtisan is a very helpful tool: it provides a series of commands that will assist you in developing your app. Basically, it minimizes the creation of manual tasks, because each command will create them for you. Just by running a command, you can create controllers and modes, database migration files (and then run those migration files), providers, events, jobs, form requests, session commands, and your own custom commands. Artisan will also show the available routes, run Tinker (a tool to interact with the database), and more. \nTo start Laravel, run this command: \nphp artisan serve \nYou should see a screen with the following line: Laravel development started on plus a URL. \n\n5) Open the URL on your browser.\nCopy the URL from the previous step and open it on your browser. The following image is what you should see when Laravel has been installed successfully. \n\n6) Open Laravel on Visual Studio Code\nIn order to open Laravel and start building your app, you need Visual Studio Code. Just follow these simple steps: \n\n\nSearch for Visual Studio Code in the start menu. \n\n\n\nOpen Visual Studio Code. \n\n\nClick File on the Menu bar and choose Open Folder\n\n\nOpen Laravel by choosing the folder that you created on Step 3. \n\n\n\nAfter opening Laravel, you should see the following folders and files:  \n\n\n\nConfiguration\nAfter you have successfully installed Laravel on Visual Studio Code, everything should work just fine. However, there\u2019s a configuration option that you always need to set- your unique application key.\nIn order to have your own unique application key, you need to run the command below on the command prompt (before executing this command, make sure you\u2019re in the root directory of the Laravel application): \n\nAs you can see on the above picture, after you run the command for generating your key, there\u2019s a line that tells you that the application key has been set succ"},"2019\/symfony-vs-laravel":{"title":"Symfony vs. Laravel","description":"Symfony vs. Laravel","content":"One of the challenges when you're starting to learn PHP- or you're deciding about the technology stacks for a new project- is choosing the right PHP framework. A framework is simply a skeleton that will help you build your application without having to do everything from scratch. It will provide standard functionality that can be changed and adapted to a specific project. \nThere are many PHP frameworks- Laravel, Symfony, CodeIgniter, Zend, CakePHP, Yii, etc.- and some developers believe that choosing the right one could be critical for your project success or for your PHP learning journey.\nTwo of the most popular nowadays seem to be Symfony and Laravel. Apparently, in the past years, Symfony was the most used one; however, since 2015, Laravel has been gaining a lot of popularity, probably because its tutorials are widely available. \nBoth frameworks have important features in common, but they also have their key advantages. Thus, before arguing which framework is the best, let's get to know them better. \nWhat is Symfony?\nSymfony is a free framework for web applications and websites. It has been developed to build any type of a web application, from blogs to high traffic sites, or large-scale projects. It allows developers to build an upgradable, well-maintained and high-standard application with PHP. Here are some of its pros and cons: \nPros:\n\n\nEasy to debug with their built-in tool \n\n\nIt has an active community, and it's well documented. \n\n\nYou can learn the best practices of coding \n\n\nPowerful and flexible \n\n\nGreat plugin ecosystem \n\n\nCons:\n\n\nToo many configurations \n\n\nThe security mechanism can be hard \n\n\nMainly used for large-scale applications. \n\n\nHere's a list of more good reasons for using Symfony framework.\nWhat is Laravel?\nLaravel is a free PHP framework based on Symfony. Its philosophy is to make development easier without sacrificing functionality by facilitating tasks that are commonly used in web applications. It's intended for building applications that follow the MVC pattern.  \nLet's take a look at its pros and cons: \nPros:\n\n\nEasy to learn and easy to use\n\n\nDocumentation and many tutorials available\n\n\nHigh security \n\n\nEasy to build REST API \n\n\nYou can use components of Symfony \n\n\nEasy to handle event queuing \n\n\nCons:\n\n\nIt's still under development, so it can still have some bugs \n\n\nUses too many magic methods \n\n\nDifficult to use model properties \n\n\nHere's a detailed list of advantages of using Laravel. \nA fair comparison between both frameworks\n\n    \n        Symfony\n        Laravel\n    \n    \n        \n            Free to use\n            Free to use\n        \n        \n            Doesn't follow MVC pattern strictly\n            Follows MVC pattern strictly\n        \n        \n            Reusable components, libraries and packages are available\n            Reusable components, libraries and packages are available\n        \n        \n            For templating, the twig is used\n            For the templating, the blade is used\n        \n        \n            Default ORM Doctrine is used\n            Default ORM Eloquent is used\n        \n        \n            Has no micro-frameworks\n            Has many micro-frameworks\n        \n    \n\nIt might depend on the type of project, it might depend on the developer\nIn my opinion, Symfony is a better framework to work with enterprise applications, thanks to its debugger and libraries that make it easier to build large-scale applications. Laravel might be perfect to work with any small project with less complexity. \nNevertheless, there are developers who just use one framework for everything. They are used to building any kind of application with the same framework. This doesn\u2019t stop them from being productive; they configure everything to adapt their needs and end up executing any small, medium or large-scale application the way they intended. \nSo, which framework should I go for?\nAfter reading a couple of reviews and a lot of Internet comments about both frameworks, you might realize t"},"2019\/whats-great-about-vs2019":{"title":"What's great about Visual Studio 2019","description":"What's great about Visual Studio 2019","content":"The new Visual Studio 2019 is here, still as a preview but it already deserves our attention. It brings great innovations for first-time and older users, such as a simplified UI, improvements to installation, search and debugger, and also the new emphasis on collaboration, that promises to be more productive for teams. If you want to know more about what it has to offer, take a look at their article here. In this post, I would like to share my thoughts on the matter as a .NET\/C# developer. \nSpeed\nYeah, we know, every new version is advertised as faster. But with 2019's release there are some major improvements inside. The most noticeable for me as an extension author and daily IDE user are the following. I think they are pretty interesting because they give us some useful patterns we can learn from. \nAsync: Microsoft started to deprecate every API that is not asynchronous. I mean every API supposed for the extension developers like us. As a result, 3rd party extensions should not make your UI freeze for not even 50 milliseconds. It is a nice idea, sometimes unnecessary, but we understand that.\nAPI's like providing tooltips, collecting code completion list or suggesting code actions are now asynchronous. Introducing such a change is a several step process, you cannot just remove some API and expect your entire ecosystem's developers to deal with it. \n\n\ntheir synchronous alternative is marked as [Obsolete] - so we all are notified it is not a good idea to use it anymore. Anyway, it is still there and we don't have to reimplement everything from scratch just to ship VS 2019 version of our existing extension. \n\n\nintroducing async alternative of all the API. Internally it still can be used synchronously, but it gives time to developers to adapt to the new API while working on optimizations.\n\n\nin a future version, removing the old synchronous API.\n\n\n\nSometimes your synchronous method is much faster than the overhead of calling something asynchronously. In that case, you either don't care and pay for the additional allocation and indirection (hoping this will get optimized by .NET on a lower level) or you don't make the method asynchronous at all and just pretend it is (async methods return ITask object, and inside it is some kind of state machine allowing scheduler to run portions of your method on different threads and discontinuously. Returning Task.FromResult instance from your async method lets you to not create the state machine thing while still providing ITask object. This might be unnecessary in the future if the compiler recognizes you don't need async, but that's out of topic). \nCommand Chain: this is how it has been working in Visual Studio for ages - there is still an old mechanism combining lots of COM, OLE and the IOleCommandTarget interface. An instance of this interface handles commands - any command - menus, shortcuts, even key presses - and it is attached to your code editor window, for example. What's worst? Every extension that wants to handle its own command or hook to an existing command creates its own IOleCommandTarget where it handles its stuff and CHAINS IT with the IOleCommandTarget that was there before.\nAs a result, there is a linked list of usually hundreds of IOleCommandTarget instances getting invoked every time you press a key. Just because an extension wants to handle right mouse click, for example. Insane. \nWith Roslyn (https:\/\/github.com\/dotnet\/roslyn - the new shiny framework for language compilers and IDE integrations) and the new VS, there is a new concept of command handling that is used across all the Microsoft's extensions. And it is fast. \nIt is based on generics, JIT optimizations and MEF.\nFor every high-performance command like typing a character, there is a corresponding class declaration with the command's arguments. In case of typing a character command there is class TypeCharCommandArgs with the property &quot;char TypedChar { get; }&quot; (https:\/\/source.roslyn.io\/#Microsoft.CodeAnal"},"2019\/02\/install-vscode-mac":{"title":"How to Install PHP Tools for VS Code on macOS","description":"How to Install PHP Tools for VS Code on MacOS","content":"In this article, you will find out how to install PHP Tools for VS Code. Getting it running is fast and simple, and it will take you just a few minutes.\nStep 1 - Install VS Code for macOS.\nVisual Studio Code is a free, open-source code editor that works for Windows, Linux and macOS 10.9 or higher. You can download it directly from its download page. If you need a detailed setup guide, click here. \n\nStep 2 - Install PHP Tools for VS Code.\nThere are three ways to install PHP Tools for VS Code. All of them are quick and simple. You can choose the one that works best for you. \na. Online Installation:\nThe first way to install the extension is from the Visual Studio Marketplace.\n\n\nGo to PHP Tools for VS Code on the Marketplace.\n\n\nClick the green button &quot;Install&quot; and open VS Code when prompted. \n\n\nWhen PHP Tools for VS Code opens, just click &quot;Install&quot;.\n\n\n\nb. Installation through VS Code:\nThe extension can also be installed through the VS Code's extension manager.  \n\n\nOpen VS Code.\n\n\nClick the Extensions (Cmd+Shift+X) icon on the Activity Bar on the left of the main window. If you cannot see it there, open View\/Extensions from the menu. \n\n\nWrite &quot;PHP Tools for VS Code&quot; in the search input box. Select it. \n\n\nClick &quot;Install&quot;.\n\n\n\nc. Offline Installation:\nThe last way is to download the extension file and install through the VS Code menu.  \n\n\nDownload the\u202f.vsix\u202finstallation file from DEVSENSE's\u202fdownload section.\n\n\n\nWhen the download is complete, open VS Code.\n\n\nOn the View menu, select Command Palette (Cmd+Shift+P) and write the command\u202f\nExtensions: Install from VSIX\nin the quick search box.\n\n\nWhen the Open File Dialog opens, select the file with the .vsix extension which you downloaded. \nNote: Activation of the product requires Internet connection. \n\nFor more detailed information, you can refer to\u202fmanaging extensions in VS Code.\n\n\nStep 3 - Activation\nAfter the successful installation, you should be prompted to\u202factivate\u202fyour copy of PHP Tools. A pop-up window will show during the extension startup. Activation requires internet connection.\n\nYou will have to choose among 3 options:\n\n\n&quot;I have the license key&quot;\u202fallows you enter the license key section and activate the extension.\n\n\n&quot;Get trial&quot;\u202fsends you an e-mail with 14-day license key.\n\n\n\n\n&quot;More information&quot;\u202fwill open\u202fthis web page\u202fwith purchase options and license information.\nOnce you have the license key and close the pop-up window above, you can activate your copy of the extension using the VSCode's\u202fView - Command Palette (Cmd+Shift+P), command\u202fPHP Tools: Activate extension. Enter your license key and confirm pressing\u202fEnter. \n\nThe activation requires Internet connection. The successful installation is confirmed with the following pop-up window: \n\n\n\nConfiguration options\nAfter installing PHP Tools for VS Code, the PHP settings will be as shown in the following table. You can see all the preferences in the Code\u202f&gt;\u202fPreferences\u202f&gt;\u202fSettings\u202fmenu.\n\n    \n        Setting\n        Description\n        Values\n    \n    \n        \n            \"php.executablePath\": \"\"\n            Path to the 'php' executable.\n            Full path to the\u202fphp program, or not set.\n        \n        \n            \"php.problems.exclude\": null\n            Path patterns to be ignored from reporting problems. Value can be set to 'true' to ignore all problems or a comma separated list of specific problem codes.\n            Associative map of paths and whether to exclude them from problems checking.\n        \n        \n            \"php.format.codeStyle\": \"PHP Tools\"\n            Code style standard.\n            \"PHP Tools\", \"PSR-2\"\n        \n        \n            \"phpTools.language\": null\n            Language of PHP Tools IntelliSense.\n            \"en\", \"de\", \"es\", \"fr\", \"ja\", \"pt\", \"ro\", \"ru\", \"tr\", \"zh\", or not set.\n        \n        \n            \"phpTools.language\": null\n            Show a CodeLens above each test or suite for running or debugging the tests"},"2019\/php-interview-questions-2019":{"title":"Top PHP Interview Questions in 2019","description":"Top PHP Interview Questions in 2019","content":"Do you have an interview with a hiring manager for a &quot;PHP Developer&quot; position? Are you worried about what will you be asked in the interview? Even if you're just studing for a test or you're an autodidact trying to master PHP, you should review the top 25 PHP interview questions and their answers.\n1) What is the difference between require_once(), require(), include(), and include_once() functions?\n\n\nrequire()\u202fwill cause E_COMPILE_ERROR which is a fatal error and the script will stop. \n\n\ninclude()\u202fwill only cause E_WARNING which is a warning and the script will continue. \n\n\nrequire_once() and include_once() statements are used when you need to include a file more than once. If it is found that the file has already been included, calling script is going to ignore further fatal errors or warnings respectively. \n\n\n2) What is the difference between explode(), preg_split() and str_split() functions?\n\n\nexplode() splits a given string into array by string. \n\n\npreg_split() splits a string by using a regular expression.\n\n\nstr_split() converts a given string to an array.\n\n\n3) Define ksort(), krsort(), asort() and arsort() functions.\n\n\nksort() function sorts an associative array according to the key in ascending order. \n\n\nkrsort() function sorts an associative array according to the key in descending order. \n\n\nasort()\u202ffunction sorts an associative array according to the value* in ascending order.\n\n\narsort()\u202ffunction sorts an associative array according to the value in descending order.\n\n\n4) What is a magic method?\nThe magic methods (or functions) begin with two underscores (__) and have special names. These methods are invoked by particular events. PHP calls the function instead of the coder and provides more functionality. Magic methods are: \n\n__construct(), __destruct(), __call($funName, $arguments), __callStatic($funName, $arguments), __get($propertyName), __set($property, $value), __isset($content), __unset($content), __sleep(), __wakeup(), __toString(), __invoke(), __set_state($an_array), __clone(), __autoload($className), __debugInfo()\n\n5) What is the difference between $var and $$var?\n$var and $$var are both variables. The first one is a normal variable, and the second one is a reference variable. $var has a fixed name, while the name of $$var is stored in $var.\n\n6) What is the difference between htmlentities() and htmlspecialchars() functions?\n\nhtmlentities() converts all possible characters to HTML entities. \nhtmlspecialchars() converts only predefined\u202fcharacters to HTML entities. \n\n7) What are the error types in PHP?\n\n\nNotices: These are non-critical errors which occur during executing a script. These errors are not displayed to the user by default. For example, trying to call an undefined variable. \n\n\nWarnings: These are serious errors which are displayed to the user, but don't cause script termination. For example, trying to call a non-existent file. \n\n\nFatal errors: These are critical errors which cause the termination of the script. For example, trying to call a non-existent function. \n\n\n8) Define the numeric array, associate array and multidimensional array.\n\n\nNumeric array is an array that uses numeric index. Values are stored in a linear way. \n\n\nAssociative array is the array in which the keys are strings.  \n\n\nMultidimensional array is an array which contains one or more arrays. The values can be accessed by multiple indices.\n\n\n9) How can you get environment variables?\n\ngetenv() function provides access to the value of all environment variables.\n\n\n10) Define $_REQUEST\n$_REQUEST variable contains $_GET, $_POST, and $_COOKIE. $_REQUEST can be used to get form data sent with GET and POST methods. \n\n11) What is the use of the array operator ===?\nThe array operator checks the variables on the left and the right side, whether they have the same key-values in the same order and they are of the same types.\n12) What is the difference between preg_match() and preg_split() functions?\n\n\npreg_match() function searches the gi"},"2019\/why-php":{"title":"12 Reasons You Should Learn PHP in 2019","description":"12 Reasons You Should Learn PHP in 2019","content":"Did you know that PHP is used by more than 80% of all the websites? Over the last quarter of century, a lot of programming languages were claimed to be the best, but only PHP became a worldwide language and steadily stayed among the top most used programming languages. \nYou might ask- if there are so many programming languages, why should I choose PHP? In this article, you will find the most important reasons to choose and use PHP as a programming language. \n\nJust so that you know:\nFront-end: When you use your computer, tablet or smartphone, the front-end is all you see and touch. Users interact with front-end applications directly. For front-end purposes, HTML, CSS, and JavaScript are used. \nBack-end: There is always some software running behind the scene which users don't know about. This kind of software is called &quot;back-end&quot;. The mission of this back-end software is to respond to any of the users requests. Back-end software is developed by server-side languages like PHP, Node.js, Python, Ruby, etc.\nPHP is an open-source server-side programming language. It was created in 1994 by Rasmus Lerdorf. Originally, PHP was a simple set of scripts. Lerdorf used these scripts for tracking visits to his online resume and he named them &quot;Personal Home Page&quot;. Over time, he rewrote PHP and added more functionality.\nIn June of 1995, Lerdorf released the source code for PHP to the public, which allowed developers to use it and he encouraged them to improve PHP to fit their needs. In 1997, he and his colleagues used the word &quot;PHP&quot; as a recursive acronym which stands for\u202f&quot;PHP: Hypertext Preprocessor&quot;. In 1998, PHP already had several thousand users around the world. Since then, PHP became a legend.  \n\nThe Elroubio Movie - PHP to elePHPant\nWhy should you learn and use PHP?\nThere are many reasons to develop server-side software using PHP. The most important are: \n1. PHP is open-source and free\nPHP is an open-source programming language. This means it's free. There are no open or hidden license fees, so it makes it very useful for popular Content Management Systems (CMS), like Wordpress. \nSince it is open-source, it's available for all developers, especially new ones which will develop and carry PHP to the future. Also, it is cheaper and easier for them to create a website using PHP. You can download PHP from here, but if you're not sure of what version you should download and how to configure it, PHP Tools for Visual Studio will do it for you in a simple step. \n2. PHP is easy to learn\nPHP offers many advanced features for a professional programmer, but at the same time, it is extremely simple for a newcomer. In a short time, anyone can start writing simple scripts. PHP's major aim was to be friendly and easy for novices to create simple personal pages. Because writing a PHP script is simple, it became - and it still is - a popular language for beginners.  \n\n3. PHP is fast\nToday, there are millions of internet users and every second they require something from the web servers. Especially for critical web applications like banking, security and governmental applications, speed is crucial. So, the servers and the programming language on the servers have to be really fast. With the release of PHP 7.x, PHP became 3 times faster than before. The table below compares PHP with other back-end languages.\n\n    \n        \n        Test 1\n        Test 2\n        Test 3\n        Test 4\n    \n    \n        \n            PHP\n            2.61\n            41.29\n            12.54\n            0.47\n        \n        \n            Node.js\n            11.98\n            64.78\n            16.41\n            N\/A\n        \n        \n            Python\u202f3\n            16.98\n            72.80\n            16.03\n            3.47\n        \n        \n            Ruby\n            23.58\n            189.81\n            23.09\n            3.42\n        \n        \n            Results are in seconds. (Smaller is better)\n        \n        \n            Source: \"The C"},"2018\/04\/wsl":{"title":"How to setup Windows Subsystem for Linux for a PHP Development on Visual Studio","description":"How to setup Windows Subsystem for Linux for a PHP Development on Visual Studio","content":"I was sitting at a coffee shop and my laptop was going quite loud. I opened the Task Manager to check what was eating my CPU. Ok, the virtual machine is going crazy again.\nTo save up CPU resources and disc space, because I never have too much disc space, I decided to get rid of my Linux virtual machines and use this thing called Windows Subsystem for Linux. It allows to run a Linux environment including most of the Linux applications without the need to actually have a Linux kernel. It just needs Windows 10 which I already had.\nSince I just need Linux to test some PHP projects and I don't need isolation of virtual machine or possibility to revert, I will be fine with just WSL without an overhead of virtual machine.\nNow, I will demonstrate how you can set it up.\nInstall WSL\n\n\nFirst you will need to install the Windows Subsystem for Linux. Open up Control Panel and turn it on as a feature.\n\n\n\nRestart your computer, if needed.\n\n\nInstall Linux\n\n\nNow go ahead and open Microsoft Store and install Ubuntu. WSL doesn't limit you to just this Linux distribution, so you are free to choose your favorite one.\nHere are the direct links to some of them:\n\nUbuntu\nOpenSUSE\nDebian\n\nAt the time of writing this article, I haven't found Red Hat or Fedora.\n\n\n\nClick Get. After the installation you should see Ubuntu bash.\n\n\n\nInstall Apache and PHP\n\n\nOnce you've installed Ubuntu, you will need to get a web server and PHP. I'm going to install Apache for this article, but feel free to install the web server of your preference.\nsudo apt-get update\nsudo apt-get install apache2\nsudo apt-get install php\nsudo apt-get install libapache2-mod-php7.0\n\n\nGet Xdebug\nsudo apt-get install php-xdebug\n\n\nTurn Xdebug on. Open php.ini.\nsudo nano \/etc\/php\/7.0\/apache2\/php.ini\nAppend these lines to the end of the file:\n[Xdebug]\nzend_extension=xdebug.so\nxdebug.remote_enable=1\nxdebug.remote_host=localhost\nxdebug.remote_port=9000\n\n\nCreate a PHP project\n\n\nIf you happen to have PHP Tools for Visual Studio version 1.27 or higher you can use the New project dialog.\nJust click File | New | Project, select PHP Web Project. Fill the location and the name.\n\n\n\nSelect Simple CMS Project, just to try out something a little more complex than the &quot;Hello World&quot; script.\n\n\nIf you don't have any PHP installation on Windows, PHP Tools will ask you if you'd like to install it, you can just click Yes.\n\nThen, you will get asked if you want to download composer packages. Click Yes.\n\n\nCreate a site on Apache\n\n\nOnce you have a project, you need to decide how to get it to the Ubuntu. The traditional way would be to publish it (and all the subsequent changes) through FTP\/S or share it through Samba. Luckily WSL automatically mounts Windows filesystem so you can access it from Ubuntu. For c drive it's \/mnt\/c. For developing purposes, you can setup Apache to serve files directly from there.\n\nNote: You can also access Linux files from Windows, but use it just as read-only view. Altering files will possibly lead to data corruption. You can find Ubuntu files on this location: %localappdata%\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\rootfs\\ .\n\n\n\nCreate a site on Apache.\nsudo cp \/etc\/apache2\/sites-available\/000-default.conf \/etc\/apache2\/sites-available\/example.com.conf\nsudo nano \/etc\/apache2\/sites-available\/example.com.conf\n\n\nThe newly created file will look something like this (I've removed the comments so it's shorter):\n&lt;VirtualHost *:80&gt;\nServerAdmin webmaster@localhost\nDocumentRoot \/var\/www\/html\nErrorLog ${APACHE_LOG_DIR}\/error.log\nCustomLog ${APACHE_LOG_DIR}\/access.log combined\n&lt;\/VirtualHost&gt;\n\n\nFor our example I've chosen the site name example.com, so change the configuration file to:\n&lt;VirtualHost *:8080&gt;\nServerAdmin admin@example.com\nServerName example.com\nServerAlias www.example.com\nDocumentRoot \/mnt\/c\/Miloslav\/Projects\/examplecom\nErrorLog ${APACHE_LOG_DIR}\/error.log\nCustomLog ${APACHE_LOG_DIR}\/access.log combined\n&lt;\/VirtualHost&gt;\n\n\nTo be able"},"2018\/04\/phptools-1.27":{"title":"PHP Tools for Visual Studio 1.27","description":"PHP Tools for Visual Studio, 1.27","content":"We are happy to announce the public availability of our April 2018 release of PHP Tools for Visual Studio. Based on our user's feedback and our extensive road-map, we have improved a lot of stuff, and implemented several useful features and enhancements for you. See the sections below for more information.\nEditor\nThe editor got several neat improvements in the area of code snippets, occurrences highlighting and support for F1. Now, it is possible to highlight occurrences of the echo keyword, so you can easily see where you output a string in your code. Find all references of echo (Shift+F12) has been added as well.\nUser defined snippets are now showed in your code completion together with newly added built-in snippets like #region, forr and others. The #region is our favorite because it allows us to easily organize the code, especially class members into regions.\n\nFinally, now you can get help for your PHPDoc keywords by pressing 'F1'. This helps with proper understanding and use of PHPDoc keywords.\nLocalization\nWe have worked hard to provide localized built-in help for PHP language. Today our integrated help uses settings from your Visual Studio and provides you with a PHP manual in major languages like Spanish, German, French, Russian, Chinese, Portuguese or Japanese. Additionally, most of UI texts are now provided in your current language as well.\n\nTwig &amp; Smarty\nThese frequently used templating languages are integrated into PHP Tools as well. The integration is seamless and provides all you need for fluent development including IntelliSense, syntax highlighting, navigation, automatic installation through Composer and also our Twig designer. Today's update improves the editor performance and stability, and adds a few new features for simpler writing of Twig templates. IntelliSense now understands the user's defined Twig filters and allows you to navigate to them.\nOther Improvements\nIn addition to the areas listed above, we have also improved code validation, general performance, and fixed hundreds of smaller and potential issues. Please, don't hesitate, try the new update and let us know if there is anything you would like us to improve for you."},"2018\/02\/phptools-1.26":{"title":"PHP Tools for Visual Studio 1.26","description":"PHP Tools for Visual Studio, 1.26","content":"Check out the latest update of PHP Tools for Visual Studio which brings several interesting features and enhancements.\nStructure Guidelines\n\nHave you noticed that Visual Studio 2017 shows dashed lines on the side of code structures in C# code editor? This gives you a great overview of complex code blocks, switch blocks, loops and similar. Starting with version 1.26, PHP Tools brings this feature to PHP code editor in Visual Studio as well.\nDeprecation Warning\n\nOur PHP Editor contains the entire PHP manual and understands other PHP versions as well. In addition to that, we take care about supported and unsupported constructs, trying to help to overcome issues when updating to a new version of PHP. In this update, we bring several new code validation rules that attract your attention to possible issues in your code.\nTwig Integration\n\nTwig is one of the most popular template engines for PHP. Recently we have introduced our unique Twig editor that understands the code and provides contextual IntelliSense, syntax colorization and outlining, all with undisturbed HTML\/CSS\/JavaScript editing experience. The editor provides also live view on generated PHP code and live view on resulting HTML code. Moreover, the editor highlights the structure generated by the twig expression under the cursor.\nImprovements and Fixes\nIn short, the 1.26 update also enhances stability and improves several other features like debugging, refactoring, test explorer and others. See the full change log for the full list of enhancements."},"2017\/11\/phptools-1.25":{"title":"PHP Tools for Visual Studio 1.25","description":"PHP Tools for Visual Studio, 1.25","content":"Check out the latest update of PHP Tools for Visual Studio which brings several interesting features and enhancements.\nTwig Templating\nWe newly provide Twig templates editor with contextual code completion, tool tips, navigation, error checking, snippets, outlining, code colorization, reference highlighting and more.\nThe editor automatically finds out that your projects does not have a Twig framework installed and gives you one-click option to install it. It understands your code and provides you even with your custom user extensions such as variables and filters.\n\nThere is also a new feature for fine tuning your code called Twig Split View; where you see what actual PHP code is produced from your template and matches cursor in source Twig with position in generated code. In this way developers can really understand the Twig.\nFor more information please see https:\/\/docs.devsense.com\/editor\/twig.\nPhar Explorer\nEvery .phar file included in PHP project is processed. Its content can be seamlessly expanded right in the Solution Explorer to see files inside the package. Files can be browsed, searched and opened. Also all the navigation features like IntelliSense, Navigate To or Tool Tips provide you with functions and classes from the Phar files now.\nSee https:\/\/docs.devsense.com\/navigation\/phar for more info.\nPHP 7.2 ready\nWe are ready for PHP 7.2 release. If you install it by yourself now, the editor already understands its new syntax. For the next major release of PHP Tools we are preparing a lot of analysis features that will help you with migration from older versions of PHP to the newer standards.\nImprovements\nAdditionally there are hundreds of enhancements to PHP Tools. We have improved the memory usage and UI on High DPI displays. Also refactoring and code parser were fixed based on users feedback.\nVisual Studio 2017\nThe update supports Visual Studio 2017 and fully integrates PHP into this industry standard development environment. Please note, the installation package for VS 2017 comes as a separate file.\nMore at https:\/\/www.devsense.com\/download."},"2017\/08\/phptools-1.24":{"title":"PHP Tools for Visual Studio 1.24","description":"PHP Tools for Visual Studio, 1.24","content":"Check out the latest update of PHP Tools for Visual Studio which brings powerful debugging features and enhancements.\nAdvanced Debugging Features\n\nVisual Studio offers incredibly rich debugging environment and knowing these features can save lot of time. We are happy to announce that this release includes debug features which are hard to find in any other PHP IDE, some of them are:\n\nTracepoints (&quot;When Hit&quot; breakpoints)\nConditional breakpoints which can break when value of the expression has changed (not just when it is TRUE)\nHitCount Breakpoints\nRun To Cursor (Ctrl+F10)\nand more \n\nFind more in our Advanced Debugging Tips article on https:\/\/blog.devsense.com\/2017\/7\/advanced-debug.\nDBGp Proxy\n\nWe have received request for this feature numerous times and we are happy to announce it is finally here.\nThanks to DBGp proxy support multiple developers can debug simultaneously on one machine.\nUnit Testing Improvements\n\nWith the new update you are not only limited to PHPUnit which comes bundled with PHP Tools for Visual Studio. You can use any supported phpunit version you want, including latest versions which are now supported as well.\nFind more about PHP unit testing in Visual Studio on https:\/\/blog.devsense.com\/2017\/6\/unit-testing."},"2017\/07\/advanced-debug":{"title":"Advanced Debugging Tips","description":"Learn the tips and tricks of advanced PHP debugging in Visual Studio","content":"The Visual Studio debugger is incredibly rich and knowing more than F5, F9, F10, F11 and Watch windows can save you lot of time. Finding an issue and simulating a particular state of the application can be achieved easily if we utilize the rich debugging features available out-of-the-box in Visual Studio. All these features are available for PHP developers using PHP Tools.\nRun to Cursor (Ctrl+F10)\nDuring debugging, people are often trying to reach a desired location in the source code by putting a breakpoint there or repeatedly using F10\/F11 to step through their code until they reach the location. In some cases, it actually makes sense when they are observing each statement they step over along the way. Often, though, they are just trying to reach the location they care about. In that case, there's a better alternative.\nThe &quot;run to cursor&quot; command is more convenient. When you position the cursor on the line of code you are trying to reach and press Ctrl+F10 the debugger will run the application to that line and break. That saves many F10\/F11 keystrokes. You can even start the debugging session this way and it will break the application on the line you want.\nBe careful to actually use it on a piece of code which is going to be executed. Watch out for early returns from a function within a loop, for instance.\n\nChange Values On-the-Fly\nVisual Studio debugger isn't just a read-only analyzer of the application. We can actually alter values of the variables of the program during the debugging session to simulate a different state of the application.\nLet's say you want to know if the function is going to work as expected, when some value is different. And in most cases, it does not mean changing the code and restarting. Just hover the mouse over a variable, double-click on the value and type in the new one.\n\nValues can be changed also in Watch Windows\nBreak on First Statement\n\nSupported since PHP Tools for Visual Studio 1.24.\n\nUsually in different PHP specific IDEs, there are settings for breaking on the first statement when the debug session starts. We try to respect Visual Studio conventions, so just pressing F11 will start the debugger and break on the first statement. This will save time by searching through the application and placing a breakpoint there or when you are just not sure what is going to run first. \nImmediate Window\nWhen debugging, we sometimes want to execute a particular function or expression to check the results we would get in the current context. For this purpose, we can use the Immediate Window that can be opened by pressing Ctrl+Alt+I or navigating ( Debug | Windows | Immediate ).\nLet's say we want to find out how many characters the &quot;Hello World&quot; phrase has. We can call &quot;strlen&quot; from Immediate window to find out.\n\nObviously, you are not limited to built-in PHP function, you can call any user defined function or basically any kind of valid expression as well.\nIn case of methods, we need to initialize instance of the class first (or use already existing objects in the current context) and then call the method.\nLet's say this is the class with a method we want to call:\nclass Foo{\n\n    function doFoo()\n    {\n        return \"Doing Foo\";\n    }\n}\n\n\nNote:\nIt's not required to preface the expression with a question mark (?) in Immediate Window. I'm using it in samples, because the question mark allows the expressions to be evaluated also in the Command window.\n\nTracePoints (&quot;When Hit&quot; breakpoints)\nThere are situations when we want to observe a value of the variable or expression each time a particular line of code is executed. Doing this by setting a breakpoint on the location and observing the value each time would be very time consuming. So, we usually alter the application and add echo to print the value which is not a good approach, either. In general, modifying a source code for the purpose of debugging isn't the most recommended approach as added modifications can change"},"2017\/06\/unit-testing":{"title":"Unit Tests Basics","description":"PHP Tools for Visual Studio, 1.23","content":"Introduction\nTesting is essential for verifying that our source code runs as expected. When we are implementing new features or refactoring the old ones, we want to make sure we didn't break any existing functionality. For this purpose, we can take advantage of PHPUnit - the most widely used unit testing framework for PHP language. \nObviously, PHPUnit can be used from the command line, but we can also use it from Visual Studio Testing UI. This dramatically reduces the effort to create and maintain unit tests for new or existing code. In this article, I will demonstrate the basic functionality of unit testing from Visual Studio. This integration works since VS2012 for PHPUnit 5 and 6 (since PHP Tools for Visual Studio 1.24).\nTo follow this article, you can download and open the sample project.\n\n\nDownload Sample Project\n\nSetting it up\nTo enable testing, we'll need to create a PHP Project. You can either create a new project (File | New | Project, select PHP and choose PHP Web Project) or create project from existing code.\nPHP Tools for Visual Studio comes with build-in PHPUnit (since 1.23 it's using version 5.7.9 ). Therefore, we don't need to download PHPUnit nor configure it if we don't want to. Later in this article we'll discuss a scenario of what to do when other PHPUnit version is required.\nWriting tests\nWriting a test for PHPUnit requires that the test to fulfills these requirements:\n\nFiles that contain tests have to be suffixed with Test.php.\nTest file has to contain class suffixed with the word test\nTest class has to be extended from a base test class. Base test class depends on PHPUnit framework version, before 6.0 we had to extend from PHPUnit_Framework_TestCase, since the new version full class name is PHPUnit\\Framework\\TestCase.\nTest method has to be prefixed with test.\n\nThese requirements are case-insensitive.\nThe sample project contains the project BankAccount with two files: BankAccount.php and BankAccoutTest.php. \nBankAccount.php contains a simple object which represents the bank account of a customer with two methods, one to deposit funds and the other to withdraw funds. There is an intentional bug in this method, so we can demonstrate how it looks like when the test will fail.\n\n&lt;?php\n\n\/**\n * Bank Account demo class.\n *\n *\/\nclass BankAccount\n{\n    var $customerName;\n    var $balance;\n    var $frozen;\n\n    function __construct($customerName, $balance)\n    {\n        $this-&gt;customerName = $customerName;\n        $this-&gt;balance = $balance;\n    }\n\n    public function Withdraw($amount)\n    {\n        if ($this-&gt;frozen)\n        {\n            throw new InvalidArgumentException(\"Account frozen\");\n        }\n\n        if ($amount &gt; $this-&gt;balance)\n        {\n            throw new InvalidArgumentException(\"Amount has to be less or equal to $this-&gt;balance\");\n        }\n\n        if ($amount &lt; 0)\n        {\n            throw new InvalidArgumentException(\"Amount has to be greater or equal to 0.\");\n        }\n\n        $this-&gt;balance += $amount; \/\/ intentionally incorrect code\n    }\n\n    public function Deposit($amount)\n    {\n        if ($this-&gt;frozen)\n        {\n            throw new InvalidArgumentException(\"Account frozen\");\n        }\n\n        if ($amount &lt; 0)\n        {\n            throw new InvalidArgumentException(\"Amount has to be greater or equal to 0.\");\n        }\n\n        $this-&gt;balance += $amount;\n    }\n\n    private function FreezeAccount()\n    {\n        $this-&gt;frozen = true;\n    }\n\n    private function UnfreezeAccount()\n    {\n        $this-&gt;frozen = false;\n    }\n\n}\n\nThe other file contains a test for BankAccount class. To test the BankAccount.Withdraw method we can write two tests. One that verifies the standard behavior of the method and one that verifies that a withdrawal of more funds than what the accout's balance has will fail.\n\n&lt;?php\n\nrequire \"BankAccount.php\";\n\nclass BankAccountTest extends PHPUnit\\Framework\\TestCase\n{\n    \/**\n     * @var BankAccount\n     *\/\n    protected $a"},"2017\/04\/phptools-1.23":{"title":"PHP Tools for Visual Studio 1.23","description":"PHP Tools for Visual Studio, 1.23","content":"Checkout the latest update of PHP Tools for Visual Studio which brings several interesting features and enhancements.\nSuggestions\n\nNamespaces in PHP and corresponding 'use' declarations have become easier to use with our new suggestions Ctrl + . . The PHP editor recognizes a class name outside the corresponding namespace. The light bulb menu then contains several options how the problem can be fixed - either by automatically adding the correct 'use' or by expanding the class name to a fully qualified one.\nIn the future, we plan on extending this platform and adding a plethora of other suggestions for various scenarios.\nMore at docs.devsense.com\/editor\/sugestions.\nSmarty Templating\n\nWe are happy to provide great support for the smarty templating engine. Our editor offers code colorization, HTML integration, snippet completion on TAB, IntelliSense or syntax checking. In addition, we scan your project for variable declarations in order to list them in IntelliSense as well. Moreover, the information in the tooltips is bound to the Smarty package you use. This means that all the smarty modifiers and functions are collected directly from the actual smarty you are using, including its summary and signature.\n\nIn case you start a project without installing Smarty first, we've got your back. The editor realizes that Smarty is not defined and asks to install it automatically using Composer.\nMore at docs.devsense.com\/editor\/smarty.\nPHP 7.1\n\nWith the new update we fully support PHP 7.1 syntax, IntelliSense, Xdebug and debugging in general, and we also offer project support as well as an automatic installation when you first run your PHP 7.1 project.\nImprovements\nThere are many small and bigger enhancements to PHP Tools. We have reduced the startup time to almost zero seconds, improved the detection of Unicode and non-Unicode source files and added several smart code validation rules.\nVisual Studio 2017\nThe update supports Visual Studio 2017 and fully integrates PHP into this industry standard development environment. Please note, the installation package for VS 2017 comes as a separate file.\nMore at PHP Tools for Visual Studio Download."},"2017\/01\/phptools-1.22":{"title":"PHP Tools for Visual Studio 1.22","description":"PHP Tools for Visual Studio, 1.22","content":"Today, we are happy to announce public availability of PHP Tools 1.22. The release brings several internal improvements but also build for latest Visual Studio 2017 RC and complete support for Smarty templating.\nSmarty\nOne of the most requested feature is the support for Smarty templating. We are happy to show the smarty templating with code colorization, tool tips, code completion and other editor features you are used to. The editor is smart enough to show user variables, smarty modifiers and operators. It also does show you source code of modifiers by navigating to its definition right from the smarty template.\n\nPlease see docs.devsense.com\/editor\/smarty for more information.\nVisual Studio 2017\nLatest update of PHP Tools updates support for Visual Studio 2017. While VS 2017 is still a Release Candidate, we are providing the package as a preview.\nThe package can be downloaded on our download page.\nLight Bulbs\nVisual Studio 2015 introduced light bulbs as a replacement for smart tags.\n\nPressing Ctrl+. when a light bulb is available shows possible options. This feature allows us to provide more useful suggestions in a future. Light bulbs for PHP code are available in Visual Studio 2015 and newer since PHP Tools 1.22. Currently they provide suggestions for refactoring and implementing an interface and abstract classes.\nComposer Improvements\nComposer is widely used packaging platform for PHP that is fully supported by PHP Tools. User can view, update and install packages within intuitive UI. The install dialog lists, filters and shows details about all available packages.\n\nSince 1.22, the dialog also shows amount of downloads and stargazers. Newly there is also note about abandoned packages and its suggested replacement, license and publish date.\nDownload\nUpdate now to the latest release and let us know what you think. We're always happy to receive your feedback.\n"},"2016\/12\/phptools-1.21":{"title":"PHP Tools for Visual Studio 1.21","description":"PHP Tools for Visual Studio, 1.21","content":"PHP Tools for Visual Studio are being continuously updated and improved with new features, always supporting latest Visual Studio and PHP. Today we are introducing version 1.21 and what is new in there.\nPHP 7.1\nWith this release we have started supporting PHP 7.1 syntax. The version of PHP used by your project can be set in Project | Properties, otherwise PHP Tools recognizes whether you are using PHP 7.1 automatically.\n\nNew multi-type catches, nullable types, void type and iterable type are recognized by the parser and our unique type analysis to provide better IntelliSense and code validation features. For more information about PHP 7.1 features and how we check compatibility between various PHP versions please see Code Validation#PHP 7.1.\nVisual Studio 2017 RC\nWe are happy to be Visual Studio Sim-Ship partner for several years already. With every new release of Visual Studio we are providing compatible version of PHP Tools. Since version 1.21 PHP Tools support VS 2017 which you can find in our Download Page.\nCode Validation\nThere are several new code validation rules and features.\n\n\nuse statements within your code are analysed whether they are used or not. Not used 'uses' are nicely dimmed as it is done in the C# editor.\nNewly we report compatibility issues in your PHP 7 code that are supported only in PHP 7.1 or newer.\nWe report there are duplicate case values within a single switch.\n\nEditor Improvements\nExcept minor improvements in code analysis, we newly show a value of assigned-only variables in certain cases. Anyway there are more features coming in a future update..\nFixes\nThanks to rich user's feedback we are continuously fixing issues and improving user experience. This release contains several memory optimizations, fixes rare cases in manual mapping of remote debugging, fixes UI of the Composer integration and fixes source code parsing.\nDownload\nUpdate now to the latest release and let us know what you think. We're always happy to receive feedback.\n"},"2016\/12\/codevalidation":{"title":"PHP code validation","description":"PHP code structure validation and PHP version compatibility","content":"We are working very hard to improve PHP Tools so we can provide new and better tools for creating safe and efficient code.\nToday, we will spotlight numerous new features, introduced in the latest PHP Tools, that focus on code validation and PHP version compatibility.\n\nPHP Tools validate the source code and report syntax errors, incorrect constructs and features supported in newer versions of PHP.\nThe reported errors are separated into three categories based on what causes them and how they are usually fixed.\nGeneral syntax errors\nThis first category contains fatal errors, which signal incorrect syntax.\nThese errors can be the most intricate to fix, because they usually require code refactoring.\nPHP Tools highlight the errors and provide a tooltip with detailed information to help the users find the cause more easily.\nPHP Tools report syntax errors, duplicate use declaration (including function and constant uses), parent keyword used outside of a class and many more.\nThe following example shows duplicate use declaration as it is reported by PHP Tools\n\nThe next example shows a simple syntax error including the tooltip displayed by PHP Tools. All the syntax errors are highlighted and reported the same way.\n\nThe other errors have custom tooltips that explain the what went wrong, as shown in the next example.\n\nCode structure errors\nThis category contains errors caused by incorrect code structure - the code is syntactically correct, but it contains misused or unknown types.\nThese errors usually indicate a missing include statement or a typo in a type name.\nPHP Tools report unknown classes, unknown interfaces, classes used in place of interfaces and more.\nThe following example shows an incorrect class hierarchy as it is reported by PHP Tools.\n\nPHP version compatibility errors\nAside from the general errors, PHP Tools report compatibility issues caused by using features supported in another version of PHP than the one currently used for the project.\nThese issues are reported as errors, because their usage causes the PHP runtime to crash. PHP Tools report the unsupported features for the PHP 5.5 and newer, up to the latest PHP 7.1.\nPHP Tools report all the issues located in the code, even when multiple errors are cause by a single construct, like in the following example for PHP 7.0.\n\nAll these errors can be fixed by switching to a newer version of PHP.\nIf that is not possible, PHP Tools report all the unsupported constructs so they can be easily tracked and fixed.\nThe next example shows new features introduced in PHP 7.1 as they are reported by PHP Tools when using PHP 7.0.\n\n\nWe hope that these features will help you create safer code and we look forward to your feedback.\nLatest version of PHP Tools can be downloaded from download.\nThe complete list of all reported errors and more detailed information can be found in our documentation.\n"},"2016\/11\/vs2017":{"title":"Sim-ship with Visual Studio 2017","description":"Announcing PHP Tools for Visual Studio 2017","content":"Today, we are proud to announce the release of an early access version of PHP Tools for Visual Studio 2017. For the third consecutive major release of Visual Studio, DEVSENSE was selected as Visual Studio Sim-ship partner.\nFormally known as Visual Studio &quot;15&quot;, the next version of Visual Studio has finally reached RC status as Visual Studio 2017 RC - now with the official support for PHP language.   \n\nPHP Tools for Visual Studio 2017\nPHP Tools is the extension you need for PHP development within Microsoft Visual Studio. In addition to a colorful editor experience, it provides productivity features like code validation, advanced code navigation, IntelliSense, integrated visual debugging, refactoring or unit test support. PHP Tools enables the development of PHP code in the industry standard environment while respecting the user conventions. \n\nIn Visual Studio 2017, Microsoft introduces new Visual Studio Installer, which provides a more lightweight and faster installation process. This is the reason why most extensions for Visual Studio will be shipped in separate packages. PHP Tools are not an exception.\n Visual Studio 2017\nIt goes without saying that as soon as VS2017 RTM is out, we will be shipping a version of PHP Tools for Visual Studio that supports it, plus many other exciting news are coming, so make sure to follow us on Facebook or twitter.\nFeedback\nPlease keep in mind that PHP Tools for Visual Studio 2017 is in the preview version, so issues are to be expected here and there. Let us know if you run into any of them.\n"},"2016\/11\/unusedcode":{"title":"Unnecessary uses","description":"Unnecessary use reporting in PHP Tools","content":"We are working very hard to bring new features to PHP Tools so we can improve the user experience and usability. Today we introduce newly added highlighting of unnecessary use declarations.\n\nPHP use declarations allow developers to simplify their PHP source code by eliminating long confusing names.\nHowever, they can also clutter the code if there is too many of them, especially if some of them are not necessary, like in the following example.\n\nThis example shows a file with multiple use declarations, where the unnecessary declarations are dimmed (partially transparent), just as they are in latest implementation of C#.\nUnnecessary uses\nPHP Tools helps developers keep their code clean, we analyze all the uses and track those that are actually used to translate type, function or constant names.\nUses that are declared but not applied are displayed as partially transparent so they can be easily located.\nUnnecessary aliases are fully functional; they offer tooltips and navigation.\nPHP Tools analyze the code continuously and once a use is applied; it is displayed normally as it is no longer unnecessary.\nFunction and constant uses\nFunction and constant aliases, supported since PHP 5.6, are analyzed in PHP Tools as well.\nWe track them even in more complex situations, like the one in the following example.\n\nThis simple file demonstrates the highlighting of use declaration for functions and constants.\nThe following statement requires the first and last use declaration, but the alias bar is not needed, because only simple function names (those without namespace prefix) are translated.\nSpace\\bar(ClassA::x, Constant);\nFor example, the following code would require the third use declaration.\nbar(2, 5);\nGroup uses\nGroup uses are supported since PHP 7.0. PHP Tools support them along with all the other PHP 7.0 features.\nWe track all the uses in a group separately and we highlight those that are not necessary.\nThe entire group is reported, only when all its uses are not necessary.\n\nThis example highlights the functionality, ClassB is not used in the code and it is dimmed as the result, but the group is not, because ClassA is necessary.\nWe treat the same way lists of uses, like the one in last use declaration in the second example, where the second constant is never used.\n\nWe hope that you will use and enjoy this feature and we look forward to your feedback.\nLatest version can be downloaded from download."},"2016\/10\/phptools-1.20":{"title":"What's new in PHP Tools for Visual Studio 1.20","description":"PHP Tools with built-in PHP 7 and more","content":"In the previous post we mentioned some new features primarily related to our completely new parser, which gives us the ability to support for PHP 7.0 while maintaining support for PHP 5.4, 5.5, 5.6. Also with PHP 7.1 already being in the release candidate state, we're preparing PHP 7.1 support which will be available in the 1.21 release. You can check what's new in PHP 7.1 in this migrating guide. Of course, we are going to offer compatibility warnings when migrating from one version of PHP to another, as we have been doing since 1.20 - see the previous post\nThe new parser is a big step for us, but 1.20 offers so much more... Let's take a look at some of the things we've addressed in this release.\nProject system\nWe've been working on improving our project system and therefore added some features we hope you will find useful. The ones immediately visible can be seen when you right click on the project\/folder node in the Solution explorer.\n\nThere are two new commands:\n\nCopy Full Path\nOpen Command Prompt Here...\n\nCopy Full Path copies the path of the currently selected node to the clipboard. Open Command Prompt Here... does a little bit more than is visible at first sight. It opens the command prompt with the working directory set to the location of the node you selected and it adds the currently selected php framework from the project properties to the command line PATH environment variable (it only affects the runtime environmental variables of the process). This way you are able to execute php scripts\/commands with the same php as in the setup of the project.\n\nProject Home\nAs you know, PHP Tools are using project files (.phpproj) as their project metadata holder. It is MsBuild based and contains information about your project (php version, server settings,...). Until 1.20, it was required to have the project file in the project root directory. Since 1.20, you can move it to another location if needed; just specify it in the ProjectHome property. For now, this can only be done by editing the project file (.phpproj) directly.\nEdit supported in Compare view\nWe had the ability to compare php files located in the source control in the previous releases. Now, however, you can also edit the file while having it open in the compare view and immediately see the differences.\n\nDebugger\nOne of the most requested features for our debugger was the ability to specify the custom directory mapping manually.\nPath has to be used when debugging remotely, using symbolic links, or in other cases when the location of the debugged php file isn't the same as the file opened in Visual Studio running on a local machine. The debugger must thus be able to map the path of the remote file to local paths.\nOur automatic path mapping algorithm can determine the mapping in many scenarios, assuming you have the initial script included in your project. For those scenarios that cannot be determined automatically, you can now specify the mapping manually.\n\nCulture specific manual\nIf you are running your Visual Studio in Japanese or Portuguese you are going to see an integrated manual translated to your language. \n\nPretty stuff\nBesides important features and fixes, we've added some nice-to-have things that should make working with PHP Tools a more pleasant experience.\nHigh-DPI support improvements\nWhen using High-DPI displays, you usually have to set up a scaling level different from 100%, so that the text on the display can be legible. Up until 1.20, we were scaling all the icons from the bitmap, which didn't provide the best results. Now we have both bitmaps and vectors for most of our icons. When 100% scaling is set up, we use bitmaps, for all the other scaling settings we use vectors. This way, icons should always look pleasant.\n\nSignature Help gets colors\nPHP Tools have colorized tooltips for some time now. Starting with 1.20, the signature help gets colors, too.\n\nThis feature is also available for the VS 2010 release, which cannot be found in built-in VS2010 l"},"2016\/10\/php7":{"title":"PHP Tools with PHP 7 support","description":"PHP Tools with built-in PHP 7 and more","content":"PHP 7 proves it is faster and more secure than PHP has ever been. We are happy to announce the public availability of PHP 7 support into Visual Studio, including code colorization, IntelliSense, debugging, refactoring, unit testing and all the Visual Studio features you like.\n\n\nBackground\nBefore we introduce all the yummy features we've prepared for you, let me tell you about the hard work we had to do.\nFirst, we had to develop a completely new language parser. It had to be able to process any PHP version since PHP 5.4, be fast, memory efficient and extensible. Our new parser is ready for much more than we are currently doing, so stay tuned for plenty of new features we will be able to implement now. Since the parser is the core component of our product, almost every second line of our sources has been changed.\nSecond, there is a lot of information a developer needs to know during coding, like the declaration of all the functions and classes in PHP, in detail. We had to find a way of providing up to date information about PHP functions, possibly in your native language, in a natural and easy way. There is a lot of work and computer semantization involved in the precision of the information we serve in a little thing like a tooltip.\nThis is a big change and we will be happy for your feedback and ideas how to make thinks even better.\nPHP 7 Editor Features\nThe PHP Editor supports the full PHP 7 (and older PHP versions) syntax now. It includes the following:\n\nFunction return types!\n\nfunction __toString() : string\n\nPrimitive types type hinting, you can now specify int, float, string and bool as function parameter types.\n\nfunction foo(int $i)\n\nAnonymous classes\n\n$x = new class {\n    function __invoke() {\n        \/\/ ...\n    }\n};\n\nNew operators like null coalescing (??) or spaceship (&lt;=&gt;)\n\nif (($a &lt;=&gt; $b) == -1) echo $a ?? $default;\n\nAnd other syntactic improvements ...\n\nIn addition to syntax support\n\nPHP 7 code is highlighted\ntypes are colorized\ntooltips are nice and smooth, respecting your editor settings and PHP 7 notations\nrefactoring looks at new PHP 7 constructs as well\n\nCode Validation Features\nWith the new PHP 7, there is also a new IntelliSense database included in PHP Tools. We have updated and annotated the whole PHP manual including information about supported PHP versions. Since PHP Tools 1.20, we recognize and underline pieces of code that are available only in a newer version of PHP than you actually use.\nIf you use the new return types or another construct not supported by your PHP, you'll be notified: \n\nAlso if you use a function or a class, that is present only in a newer PHP, you'll get an immediate warning:\n\nDownload\nGet PHP 7 into your Visual Studio on www.devsense.com\/download."},"2016\/07\/spell-checking":{"title":"Spell Checking in PHP Code","description":"Ensure that your source code, including strings and comments, is spelt correctly.","content":"Spell Checking in PHP Code\nVisual Studio has various spell checking extensions that support PHP Tools for Visual Studio. They make sure that your source code, including strings and comments, is spelt correctly.\nFor this purpose we can recommend to install VSSpellChecker, which can be downloaded from Visual Studio gallery (https:\/\/visualstudiogallery.msdn.microsoft.com\/a23de100-31a1-405c-b4b7-d6be40c3dfff). Make sure you install at least version 2016.5.28.0, which is the first version to support PHP Tools for Visual Studio.\nFix a typo\nWhen a misspelled word is detected, the plugin highlights the word and a smart tag is displayed with a set of possible corrections. You can accept some of those and the word will automatically be corrected. Or you can choose Ignore Once to ignore the word for this occurrence only, Ignore All to ignore it for all occurrences or Add to Dictionary. The extension then stops reporting the word.\n\nChange dictionary\nThe extension comes with different dictionaries for the main languages. You can change the dictionary in Tools | Spell Checker | Edit Global Configuration, In the Global Dictionary section, choose the language you want and click Add. Press Ctrl + S, to save the configuration. Then you may need to reopen files so that the changed configuration takes effect.\nMore information\nDetailed information about VSSpellChecker can be found on https:\/\/github.com\/EWSoftware\/VSSpellChecker\/wiki."},"2016\/06\/dreamspark":{"title":"PHP Tools and Microsoft DreamSpark after three months","description":"PHP Tools available at Microsoft DreamSpark","content":"Leading the Way with DreamSpark - Free PHP Tools for Students\nThis march, we became the first and only non-Microsoft software to become part of the DreamSpark initiative. Since then, students from all over the world could download PHP Tools for Visual Studio absolutely free of charge.\nAnd download they did. Over 3000 students have gained free access to PHP Tools for Visual Studio since the inclusion into DreamSpark. We have registered in excess of 30 daily student downloads on average.\n\nWe are incredibly honored to be the first outside company to become a member of this program, as its message resonates very strongly within our values.  We are extremely excited to see the fantastic projects that will be created as a result of the DreamSpark initiative.\nIf you are a student and would like to get a free PHP Tools for Visual Studio license, click here. For more information see www.devsense.com\/student."},"2016\/03\/dreamspark":{"title":"PHP Tools available at Microsoft DreamSpark","description":"PHP Tools available at Microsoft DreamSpark","content":"Today, I'm excited to announce that we are making PHP Tools for Visual Studio available at Microsoft DreamSpark catalog.\nWe've partnered with Microsoft DreamSpark program so students can get PHP Tools for Visual Studio for free.\nTogether with Visual Studio Community 2015 students get a powerful PHP development environment at no cost!\n\n"},"2016\/02\/newsletter-phptools-1.19":{"title":"PHP Tools 1.19 Release","description":"PHP Tools 1.19 Release Notes","content":"We are happy to announce that the new version of PHP Tools for Visual Studio - 1.19 - is available.\nPlease visit the downloads page to download and for more information about the improvements we are introducing. \nImproved Per-Project Properties\nProject properties were extended. In the future, there will be much more to enable and configure.\nFor example, since version 1.19, it is possible to set the project Web Root; the relative path used as the web site root.\n\nSmart Issues Resolver\nEvery project and server configuration is checked to ensure the user won't have to deal with common issues. Both in project properties or during project launch (F5), issues are checked and automatic repairs are offered to the user.\nSimply by clicking Continue, PHP is downloaded, php.ini directives fixed or common recommendations are applied.\n\nIIS Express &amp; SSL Support\nThis update improves IIS Express support as well. Together with general improvements and fixes, it is now possible to enable SSL binding.\nIn addition to new features, the web site configuration is checked for common problems and certificate issues. Furthermore, the selected PHP version is automatically downloaded and installed if applicable.\n\nCode Definition Window\nA little used feature that makes programming easier; Code Definition Window allows users to view the definition of a symbol under the cursor continuously in a separate tool window. The default shortcut to open the window is Ctrl+\\,D.\nTypically the user moves the window to a second monitor to keep track of the definitions.\n\nOptimizations\nWe are always trying to make programming fluent and well-arranged. While supporting bigger and bigger projects, hardware requirements should remain the same as before.\nWith version 1.19 we have introduced major optimizations - mainly lowering memory requirements. Up to 75% less system memory is used while providing the same coding experience.\n\n\nFor more information see the change log or our features page."},"2015\/10\/debugging-multiple-projects":{"title":"Debugging Multiple PHP Sites\/Projects","description":"Debugging Multiple PHP Sites\/Projects with PHP Tools for Visual Studio and Xdebug","content":"When you develop applications that need to communicate with each other you might need to debug two or more projects at once. You can achieve this very easily with PHP Tools for VS.\nLet's say we have a PHP web site, which will be sending requests (e.g. AJAX, SOAP or anything else) to the web service. The web site will be handling the responses and do some work with it. For this scenario we will assume both are running locally (it would be similar to when run it on a remote sever).\n\n\nDownload Sample Project\n\nSetting it up\nI'm going to assume you have PHP Tools for Visual Studio installed with PHP and Xdebug properly configured. For more information, see Configuring Xdebug\nI'll demonstrate this scenario with a simple example.\n\n\nWe will create one solution with two PHP Web Projects (*.phpproj). One for the web site, let's call it just simply PHPWebProject and the second PHPWebService.\n\n\n\nI will use a simple code:\nPHPWebProject | index.php :\n&lt;?php\n\n$ch = curl_init(\"http:\/\/localhost:38190\/\");\ncurl_setopt($ch, CURLOPT_HEADER, 0);\ncurl_setopt($ch,  CURLOPT_RETURNTRANSFER, 1);\n$response = curl_exec($ch);\ncurl_close($ch);\n\necho $response;\n\n?&gt;\nPHPWebService | index.php :\n&lt;?php\n\necho \"Hello World from WebService\";\n\n?&gt;\n\n\nWe want both projects to start when F5 is pressed. In the solution Properties (right click on Solution node in the Solution Explorer and choose Properties), select Startup Project tab, choose Multiple startup projects and select Action for both projects to Start.\n\n\n\nThe second step makes sure that when we press F5 both PHP web Projects will start. But that would mean two browsers would be launched. That's obviously something we don't want for PHPWebService. Let's open PHPWebService properties (right on PHPWebService node in the Solution Explorer, choose Properties). As Start Action select Don't open a page. Wait for a request from and external application.\n\n\n\nPHP Tools would usually initiate debug session by opening your project in browser with ?XDEBUG_SESSION_START=1 query string. But PHPWebService will not open any browser on F5. So we need to instruct Xdebug to start debugging (and connect back to Visual Studio) with other means.\n\n\nWe can do that by adding this line xdebug.remote_autostart = 1 to php.ini file in Xdebug configuration section which will force it to start on every request.\nThere are more options available, but this one is the easiest one to use.\nDemonstration\n\n\nPut a breakpoint at the first line of code at both index.php at PHPWebProject and PHPWebService. Press F5. It will break in the PHPWebProject at the breakpoint location.\n\n\nBy pressing F10 you can step until the line with curl_exec.\n\n\n\nAnother F10 will break at PHPWebService\n\n\n\nPress F10 twice and you'll get back to PHPWebProject\n\n\n\nSummary\nThis simple scenario demonstrates how you can debug multiple projects. Both projects can be in PHP, or one of them could be written in another language, e.g. C#. It would work exactly the same. \nIf you have any questions, please, add them in the comments below.\nRelated articles\nIntroduction to PHP on Docker with Visual Studio Code\nCommenting your PHP Code"},"2015\/10\/codesense-best-practices":{"title":"PHP Editor Code Sense - Best Practices","description":"Get max from Code Sense in PHP Tools for Visual Studio","content":"Visual Studio IDE provides useful information that helps with coding and might warn the programmer about typos and possible run-time issues already during the development. In the case of a PHP Editor, understanding the programmer's source code is important. Since PHP is a dynamic language, most of the information needed for a smooth editor experience is available only at runtime. However, there are several patterns recognized by the PHP Editor - so we can provide you a guideline that helps you to keep the code clean, to reveal possible bugs and to allow you to get the maximum out of the PHP Editor code sense. \nThe PHP Editor, as it is analyzing the whole PHP code, performs control flow analysis, guesses types and values of variables, constants and functions and more. This analysis has certain limitations, but works great if the code is well written.\nWrite PHPDoc above functions\nThe most useful hint you can provide to the PHP Editor is writing PHPDoc comments. These were originally intended for documentation purposes. However, the PHP Editor makes big use of this kind of comments.\n\nInformation contained in PHPDoc is all parsed and processed. Parameters and return type information is checked against the actual\/implied types and summaries are shown in tool tips. PHPDoc represents how you intend to use the function, so it is used as a hint, and anything that does not match your intention is reported as a warning directly in the editor (see below). If you don't provide the return type in PHPDoc, the PHP Editor aggregates all returns from the function and lets you know in case you return a value in one location and you don't somewhere else.\n\nProperly written PHPDoc makes your code clean, gives you the chance to clarify what your function is about and helps code completion and code analysis to provide better results.\nMind purpose of your functions\nThis is rather good programmer practice. Sometimes the function body grows and grows, it starts doing more things instead of one, has side effects etc. This results in undocumented pieces of code, which are often buggy and hard to analyze. In addition to runtime performance reasons, the PHP Editor might not analyze such functions well, resulting in all local variable types implied as mixed. Of course if the PHP Editor only knows that a variable is of the mixed type, it does not provide IntelliSense for its members at all.\nKeeping functions small with a clearly stated purpose in PHPDoc and documenting parameter types force a programmer to keep the program design clean and improves code analysis.\nDo not use single variable for everything\nLarger functions usually tend to have more variables for everything. $i, $j, $tmp or $x are common variable names that are used for various purposes within a single function. This results in a variable of more than one type. Code analysis then may ignore several warnings about type mismatches, warnings implied from using such variables may be also suppressed and so on.\nLess global code\nShortly global code is evil. It breaks everything what editor can assume from code flow. Any global variable can be changed anywhere in the whole program, in any function. This makes code analysis harder.\nThe PHP Editor aggregates all the type information it knows about a single global variable from all the source code. Then, when using a global variable in a function scope (using the keyword global), it assumes its initial type is the aggregation of everything you ever assigned to the variable in all the program. Results are indeterminate.\nAlso note that each global function and constant will be listed by code completion. Moving global code into functions and using class functions and class constants instead of globals may improve code completion, since it would have fewer words to select from.\nThink your object model\nIt is popular practice not to provide base interfaces or a base class, and to rely on the dynamicity of PHP. The programmer knows an object has a property called"},"2015\/09\/newsletter-phptools-1.18":{"title":"PHP Tools 1.18 News","description":"PHP Tools 1.18 News","content":"We are happy to announce that the new version of PHP Tools for Visual Studio - 1.18 - is available. The update brings a lot of new features, improvements and fixes\nPlease visit downloads page to download and for more information about the improvements we are introducing. \nHereDoc &amp; NowDoc\nPHP provides programmers with HereDoc (and NowDoc) syntax allowing to specify long pieces of text within the PHP code. The latest version of PHP Tools makes it easier to work with HereDoc by making its content background grey and by allowing to collapse the heredoc block.\nSince HereDoc is frequently used for fragments of XML or HTML code, PHP Editor now colorizes XML\/HTML within HereDoc.\n\nNew Visual Studio 2015 Editor\nVisual Studio 2015 comes with new HTML Editor. The editor fixes a lot of issues. Also there are plenty of plugins extending the new HTML Editor, like new Web Essentials for Visual Studio 2015. Since this update, PHP Editor has been completely rewritten to take advantage of the new HTML Editor allowing a combination of PHP, HTML, JS, CSS and 3rd party plugins within PHP files. This finally fixes a lot of prehistoric issues we've been hearing from our users.\n\nThe context menu finally shows Peek to Definition, Find All References, Refactor | Rename and other entries.\nOutlining of newly opened file does not disappear and then appear.\nOutlining of newly opened file keeps its previously collapsed blocks..\nHighlighting of matching HTML tags does not interact with PHP code.\nColorization of HTML is not buggy anymore.\nThe editor is faster, and allows more extensibility in the future.\n\nTogether with this improvement, it is finally possible to change the color of PHP operators in the editor. There is more coming in the future, so stay tuned.\nPHPDoc Improvements\nPHPDoc comments get better support in the editor. First of all, class names, variables and tags are colored, which is handy, looks beter and better represents the PHPDoc syntax itself. In addition to colors, we've added full IntelliSense for PHPDoc tags and type parameters. This includes both code completion and tool tips.\n\nCode Outlining\nOne of the frequently requested features is the outlining of all code blocks like if, switch, for etc. Since this version, it is possible to enable the outlining for generic code blocks. To do so, go to Tools | Options | Text Editor | PHP | Advanced and check Enable outlining of code blocks.\nMove Line Up &amp; Down\nVisual Studio 2013 introduced shortcuts for moving whole lines up and down using Alt+Up and Alt+Down. The feature makes it easier to refactor your code, without the need to cut &amp; paste.\nIt is even better that the PHP Editor can now format the line according to its new position. The code just fits into its new position and new context as you would cut, paste and format it manually. The functionality has to be enabled in Tools | Options | Text Editor | PHP | Formatting, so give it a try!\n\n\nFor more information see our change log or features page."},"2015\/09\/annoucement-phalanger-tools":{"title":"Phalanger Tools Support Annoucement","description":"PHP Tools 1.16 News","content":"We would like to announce changes in Phalanger Tools provided by DEVSENSE.\nPhalanger Tools for Visual Studio is still being developed and supported. The tool will be transformed into an addon for PHP Tools, it will extend its functionality by providing Phalanger runtime, project templates, item templates, extended IntelliSense and more.\n\nThis change provides Phalanger users with more frequent updates, including new features and fixes. Also it will be easier to switch between PHP and Phalanger.\nPricing\nPhalanger Tools for Visual Studio will be provided as a free addon for PHP Tools.\nExisting Customers\nAll the existing customers of Phalanger Tools can now download and activate PHP Tools as well. Within the next subscription renewal, they will be asked to upgrade to PHP Tools for Visual Studio. Their new renewal price will be lowered, the upgrade price is equal to PHP Tools renewal price.\nUpcoming Changes\nPhalanger Tools will become an addon to PHP Tools. It will automatically download and install PHP Tools if it is not installed on system yet. Also there are several planned features which affect how user will work with PHP projects in Visual Studio. One of them will be the ability to choose what runtime is required to run the project, e.g. PHP 5.6, PHP 7, HipHop or Phalanger. By choosing Phalanger, user will be asked to download and install Phalanger Tools.\nPhalanger\nThere are no licensing or other changes to Phalanger - the opensource runtime and compiler of PHP language."},"2015\/07\/php-innovation-award":{"title":"DEVSENSE is sponsoring PHP Innovation Award","description":"PHP Tools 1.16 News","content":"Since today we sponsoring PHP Programming Innovation Award.\n\nWe'd like to recognize the contribution of the developers who shared their innovative packages with the PHP community by providing them with the FREE license of PHP Tools for Visual Studio.\nThe PHP Programming Innovation Award goal is to provide recognition to developers who make outstanding contributions to the PHP community.\nFor more information about the award please visit PHP Programming Innovation Award site."},"2015\/06\/newsletter-phptools-1-16":{"title":"PHP Tools 1.16 News","description":"PHP Tools 1.16 News","content":"We are happy to announce that the new version of PHP Tools for Visual Studio - 1.16 - is available. The update brings new features and improvements, based on your feedback.\nPlease visit downloads page for download and more information about improvements we introduce. \nRefactoring\nThe editor newly recognizes that the user has changed the name of an identifier (e.g. a variable name or a function name) and shows a smart tag Ctrl+. with actions to automatically rename all occurrences. This allows to keep the code clean without undesirable typos. The standard Ctrl+R,R shortcut for renaming works as well.\n\nEditor Improvements\nWe have been working on the PHP Editor itself. Now we are introducing new tooltips that are nicely colored in all supported Visual Studio versions and structured in the same way as tooltips from native Visual Studio languages.\n\nIn addition to that, IntelliSense has been redesigned, working fluidly with namespaces and remembering recently selected items. New algorithms were designed to let you write code with fewer keyboard hits and more confidence during code auto-completion.\nOther editor enhancements include better function parameters info, smart brace completion (VS2013+), faster IntelliSense, syntax highlighting in PHPDoc, highlighting of class\/interface names or better code analysis engine.\n126 changes\nNew version introduces more than one hundred other changes and improvements. This includes stability and performance fixes, improvements to existing features and new features.\n\nFor more information see our change log or features page."},"2015\/03\/newsletter-phptools-1-15":{"title":"PHP Tools 1.15 News","description":"PHP Tools 1.15 News","content":"We are happy to announce general availability of new version of PHP Tools for Visual Studio - 1.15. The update brings new features and improvements, based on your feedback.\nPlease visit downloads page for download and more information about improvements we introduce. \nVisual Studio 2015 CTP\nSince 1.15, everyone experimenting with Visual Studio 2015 will be able to extend its functionality with PHP Tools. All the features from previous versions are now supported, and new features will be introduced in upcoming updates.\nCode Validation\nPHP Tools will analyse all your code within your PHP project. In result, you'll get better, more precise IntelliSense, checks for common issues, strongly typed code with less run-time bugs and easier maintenance. PHP editor will check for unused variables, use of uninitialized variables, dead code, missing function arguments, not allowed constructs and more.\n\nComposer\nPHP projects handle composer packages now. Either you have composer.json file already or you want to add new packages to your projects, you can do so in Solution Explorer | Your Project | References. You can see the whole structure of included packages, update or install missing. Packages are also processed by IntelliSense engine automatically.\n\nFind All References\nOne of the most useful keyboard shortcut is Shift+F12. In this way you can quickly navigate to all the references of the symbol under the cursor. In addition to this feature, PHP editor will highlight words according to current context and semantics on fly, as you move the cursor, occurrences of the variable\/function\/class\/property etc. will be highlighted so you can see it immediately.\n\nFor more information see our change log or features page."},"2014\/09\/newsletter-phptools-1-14":{"title":"PHP Tools 1.14 News","description":"PHP Tools 1.14 News","content":" We're happy to announce public availability of PHP Tools for Visual Studio 1.14. \nOur tools are being improved continuously, based on users feedback and suggestions. Latest update brings a lot of new features, improvements and fixes. Feel free to download from Visual Studio Extensions &amp; Updates or from the product page.\nColored Tool Tips\nImproved IntelliSense showing colored tool tips. IntelliSense provides more information and will be upgraded even more in upcoming releases.\n\nPeek To Definition\nPeek To Definition is a new feature introduced in Visual Studio 2013. Pressing Alt+F12 over a PHP symbol brings you small window containing definition of the symbol. In this way, you can lookup for a definition without loosing track of your work.\n\nTest Explorer improvements\nIn the PHP Tools update we introduce faster test discovery, support for PHPUnit Configuration file, configuration file editor, support for Test Suites and more. See Testing Documentation for more information.\n\nNuGet packages\nWith the new release, PHP Tools support NuGet packages. You can browse the library of web components, include them within your project and perform their automatic updates.\n\nOther improvements\n\nProject-wide Error List\nCode collapsing of lambda functions\nSupport for High DPI displays\nFeedback form in Help | PHP Tools for Visual Studio Feedback\nPHP debugger fixes\nParser fixes, support for declare(), function assert\n\n\nFor more information see our change log or features page."},"2014\/07\/newsletter-phptools-1-13":{"title":"PHP Tools 1.13 News","description":"PHP Tools 1.13 News","content":" We're happy to announce public availability of PHP Tools for Visual Studio 1.13. \nOur tools are being improved continuously, based on users feedback and suggestions. Latest update brings a lot of new features, improvements and fixes.\nTask List\nTask List is now integrated with your PHP project. It collects entries from the source code and gives you overview of tasks, work in progress and notes. This helps with building more reliable code just by noting the comment in the source code.\n\nImplement interface\nTo build code faster, PHP Tools now support smart tags over implemented interface name or extended class name. By navigating cursor over the name, Smart Tag appears. Press Ctrl+. or click to see menu with available options. This feature adds functions stub of implemented interface with all parameters, full PHPDoc comments and calls to a base class or TODO comments eventually, nicely wrapped in a region.\n\nAutomatic brace completion\nAutomatic brace completion introduced in Visual studio 2013 is useful feature completing braces and quotes. It behaves exactly like in C#, tracking what you type, making coding faster.\n\nPublish\nPublish gets several improvements. Since now, it is possible to publish only selected files and folders. The process is significantly faster. Most noticeably when &quot;Skip remote files check&quot; is turned on in your publish profile.\n\nPHPUnit integration\nPHPUnit integration into Visual Studio Test Explorer gets improved. It fetches PHPUnit unit test cases, groups them by given conditions, allowing to run, debug and check failures stack trace. PHPUnit is bundled and does not need any additional configuration.\n\nOther improvements\n\nFaster projects opening\nImproved Project From Existing Code allowing to specify file filters\n\n\nFor more information see our change log or features page."},"2013\/11\/pressrelease-php-vs2013-md":{"title":"Press Release - Visual Studio 2013","description":"DEVSENSE to support PHP in Microsoft Visual Studio 2013","content":"DEVSENSE to support PHP in Microsoft Visual Studio 2013\n Company brings PHP language support into Microsoft Visual Studio 2013 \nPrague, Czech Republic, November 5, 2013 - DEVSENSE, a software company providing tools for PHP and .NET languages integration, today announced it will be providing its PHP Tools for Visual Studio add-in to Microsoft Visual Studio 2013. It is the first add-in enhancing Visual Studio 2013 with the PHP language support. Target customers include HTML, PHP and .NET developers who are building or maintaining web services or web sites built on top of PHP language, either on Linux or Windows servers.\n\nWe are happy we can provide tight integration of PHP language into Microsoft Visual Studio 2013 development environment. Now web developers can develop, debug, deploy and test their PHP projects on top of this IDE, taking advantage of its features like great code editor or source control providers.\n\nJakub Misek, CTO, DEVSENSE\nPHP Tools for Visual Studio 2013\nThe add-in enables coding, deployment, testing, debug and management of PHP projects inside Visual Studio. It provides transparent support for PHP language inside the IDE while keeping high quality user experience. \n\nDEVSENSE's PHP Tools, now integrated into Visual Studio 2013, enable web developers to use Visual Studio's powerful capabilities in combination with the PHP language. Web developers using DEVSENSE's tools will enjoy richer PHP development with Visual Studio through improved navigation, code completion and debugging support.\n\nMitra Azizirad, General Manager, Developer Tools Marketing and Sales, Microsoft\nAbout DEVSENSE\nThe company is based in Prague, Czech Republic. It collaborated with Microsoft, providing tools and support for improving PHP web sites efficiency and security on Microsoft platforms. While working on the PHP compiler, DEVSENSE team members gained knowledge of PHP internals. This helped to create PHP analysis methods used in the compiler and in smart code editor for PHP Tools for Visual Studio. \nFor additional information about DEVSENSE and PHP Tools for Visual Studio, please visit www.devsense.com or follow @DevsenseCorp.\n\nIf you would like more information about this topic, please email Jakub Misek at jakub@devsense.com."}}