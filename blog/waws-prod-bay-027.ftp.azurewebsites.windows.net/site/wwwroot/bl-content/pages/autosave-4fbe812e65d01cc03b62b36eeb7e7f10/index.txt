In this blog post I would like to demonstrate how to install Laravel in Visual Studio. I will use new project wizard which we have in PHP Tools for Visual Studio. 

The Laravel is first more complex framework we have added to the wizard, but we are definitely going to add more of them. Just let us know which ones you'd like to prioritize.

Our goal here was to make this experience as simple as possible. The Laravel framework has certain requirements that you should install and configure first. But instead of googling the tutorial (like this one ;-) ). You should be able achive all of that just with few clicks directly in Visual Studio.

# Creating Laravel Project

### 1. Click Create a new project
![Initial Visual Studio dialog](https://blog.devsense.com/bl-content/uploads/pages/4fbe812e65d01cc03b62b36eeb7e7f10/Create-new-project.png)

### 2. Select PHP and choose PHP Web Project
![Choose PHP Web Project](https://blog.devsense.com/bl-content/uploads/pages/4fbe812e65d01cc03b62b36eeb7e7f10/PHPwebProject.png)

### 3. Name the project

![Name the project](https://blog.devsense.com/bl-content/uploads/pages/4fbe812e65d01cc03b62b36eeb7e7f10/name-the-project.png)

### 4. Select Laravel template

I've changed which PHP will be used to PHP 8.0, which I don't yet have on my machine (Of course I do and you should too, but I just deleted it for this demo :-) ). I've checked Project System 2.0 (VS 2019 only!), because it's so much better, even in it's current experimental state.

![Laravel project](https://blog.devsense.com/bl-content/uploads/pages/4fbe812e65d01cc03b62b36eeb7e7f10/laravel-project.png)

### 5. Wait

UAC will asks for permissions to continue. Accept and then wait so PHP Tools will do the work like downloading/updating composer, installing PHP, configuring Xdebug, enabling required extensions, ...

![Image description](https://blog.devsense.com/bl-content/uploads/pages/4fbe812e65d01cc03b62b36eeb7e7f10/wait.png)

... wait some more

![Image description](https://blog.devsense.com/bl-content/uploads/pages/4fbe812e65d01cc03b62b36eeb7e7f10/wait2.png)

### 6. Laravel is installed

The Laravel is installed and configured at this point with all the requisities. You don't need to configure PHP project or install Laravel intellisense composer package ( [laravel-ide-helper](github.com/barryvdh/laravel-ide-helper) it helps the Intellisense engine to provide better code completion for Laravel) this is done transparently.

![Image description](https://blog.devsense.com/bl-content/uploads/pages/4fbe812e65d01cc03b62b36eeb7e7f10/done.png)

To verify if it's really installed, just press F5. You should see this page.

![Image description](https://blog.devsense.com/bl-content/uploads/pages/4fbe812e65d01cc03b62b36eeb7e7f10/debug.png)

# Adding Laravel plugins

Once Laravel is installed, you may want to install one of many plugins. There are plugins that will provide you with great looking admin section, role based security, ecommerce features, etc. There is really a lot to choose from.

You can install any of those plugins directly within Visual Studio. Right click on Dependencies node in the Solution Explorer and select Install new composer package...

![Image description](https://blog.devsense.com/bl-content/uploads/pages/4fbe812e65d01cc03b62b36eeb7e7f10/add-package.png)

Let's search for one that would take care of role based security. Type "laravel permission" and click Install Package. You can close this dialog now, it will install on the background. 

![Image description](https://blog.devsense.com/bl-content/uploads/pages/4fbe812e65d01cc03b62b36eeb7e7f10/install-composer-package.png)

You will know it's installed from the status bar or when Composer Output pane shows it's completed with exit code 0.

![Image description](https://blog.devsense.com/bl-content/uploads/pages/4fbe812e65d01cc03b62b36eeb7e7f10/plugininstalled.png)

## Conclusion

We've tried to make this experience as straight forward as possible. Please let us know how it worked for you or what other framework we should add next.
